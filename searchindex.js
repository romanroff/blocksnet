Search.setIndex({"docnames": ["about_us", "api/_autosummary/blocksnet.method", "api/_autosummary/blocksnet.method.accessibility", "api/_autosummary/blocksnet.method.annealing_optimizer", "api/_autosummary/blocksnet.method.base_method", "api/_autosummary/blocksnet.method.centrality", "api/_autosummary/blocksnet.method.connectivity", "api/_autosummary/blocksnet.method.diversity", "api/_autosummary/blocksnet.method.integration", "api/_autosummary/blocksnet.method.land_use_prediction", "api/_autosummary/blocksnet.method.population_centrality", "api/_autosummary/blocksnet.method.provision", "api/_autosummary/blocksnet.method.spacematrix", "api/_autosummary/blocksnet.method.vacant_area", "api/_autosummary/blocksnet.method.weighted_connectivity", "api/_autosummary/blocksnet.models", "api/_autosummary/blocksnet.models.city", "api/_autosummary/blocksnet.models.land_use", "api/_autosummary/blocksnet.models.schema", "api/_autosummary/blocksnet.models.service_type", "api/_autosummary/blocksnet.preprocessing", "api/_autosummary/blocksnet.preprocessing.accessibility_processor", "api/_autosummary/blocksnet.preprocessing.blocks_generator", "api/_autosummary/blocksnet.preprocessing.blocks_splitter", "api/_autosummary/blocksnet.preprocessing.land_use_optimizer", "api/_autosummary/blocksnet.preprocessing.land_use_processor", "api/_autosummary/blocksnet.utils", "api/_autosummary/blocksnet.utils.helpers", "api/_autosummary/blocksnet.utils.service_types", "api/index", "blocksnet/contributing", "blocksnet/faq", "blocksnet/index", "blocksnet/quickstart", "examples/accessibility_processor", "examples/blocks_generator", "examples/cases/index", "examples/cases/land_use_optimization", "examples/city", "examples/index", "examples/methods/accessibility", "examples/methods/annealing_optimizer", "examples/methods/centrality", "examples/methods/connectivity", "examples/methods/diversity", "examples/methods/index", "examples/methods/integration", "examples/methods/land_use_prediction", "examples/methods/provision", "examples/methods/spacematrix", "examples/methods/vacant_area", "examples/methods/weighted_connectivity", "examples/pipeline", "index"], "filenames": ["about_us.rst", "api/_autosummary/blocksnet.method.rst", "api/_autosummary/blocksnet.method.accessibility.rst", "api/_autosummary/blocksnet.method.annealing_optimizer.rst", "api/_autosummary/blocksnet.method.base_method.rst", "api/_autosummary/blocksnet.method.centrality.rst", "api/_autosummary/blocksnet.method.connectivity.rst", "api/_autosummary/blocksnet.method.diversity.rst", "api/_autosummary/blocksnet.method.integration.rst", "api/_autosummary/blocksnet.method.land_use_prediction.rst", "api/_autosummary/blocksnet.method.population_centrality.rst", "api/_autosummary/blocksnet.method.provision.rst", "api/_autosummary/blocksnet.method.spacematrix.rst", "api/_autosummary/blocksnet.method.vacant_area.rst", "api/_autosummary/blocksnet.method.weighted_connectivity.rst", "api/_autosummary/blocksnet.models.rst", "api/_autosummary/blocksnet.models.city.rst", "api/_autosummary/blocksnet.models.land_use.rst", "api/_autosummary/blocksnet.models.schema.rst", "api/_autosummary/blocksnet.models.service_type.rst", "api/_autosummary/blocksnet.preprocessing.rst", "api/_autosummary/blocksnet.preprocessing.accessibility_processor.rst", "api/_autosummary/blocksnet.preprocessing.blocks_generator.rst", "api/_autosummary/blocksnet.preprocessing.blocks_splitter.rst", "api/_autosummary/blocksnet.preprocessing.land_use_optimizer.rst", "api/_autosummary/blocksnet.preprocessing.land_use_processor.rst", "api/_autosummary/blocksnet.utils.rst", "api/_autosummary/blocksnet.utils.helpers.rst", "api/_autosummary/blocksnet.utils.service_types.rst", "api/index.rst", "blocksnet/contributing.rst", "blocksnet/faq.rst", "blocksnet/index.rst", "blocksnet/quickstart.rst", "examples/accessibility_processor.nblink", "examples/blocks_generator.nblink", "examples/cases/index.rst", "examples/cases/land_use_optimization.nblink", "examples/city.nblink", "examples/index.rst", "examples/methods/accessibility.nblink", "examples/methods/annealing_optimizer.nblink", "examples/methods/centrality.nblink", "examples/methods/connectivity.nblink", "examples/methods/diversity.nblink", "examples/methods/index.rst", "examples/methods/integration.nblink", "examples/methods/land_use_prediction.nblink", "examples/methods/provision.nblink", "examples/methods/spacematrix.nblink", "examples/methods/vacant_area.nblink", "examples/methods/weighted_connectivity.nblink", "examples/pipeline.nblink", "index.rst"], "titles": ["About us", "blocksnet.method", "blocksnet.method.accessibility", "blocksnet.method.annealing_optimizer", "blocksnet.method.base_method", "blocksnet.method.centrality", "blocksnet.method.connectivity", "blocksnet.method.diversity", "blocksnet.method.integration", "blocksnet.method.land_use_prediction", "blocksnet.method.population_centrality", "blocksnet.method.provision", "blocksnet.method.spacematrix", "blocksnet.method.vacant_area", "blocksnet.method.weighted_connectivity", "blocksnet.models", "blocksnet.models.city", "blocksnet.models.land_use", "blocksnet.models.schema", "blocksnet.models.service_type", "blocksnet.preprocessing", "blocksnet.preprocessing.accessibility_processor", "blocksnet.preprocessing.blocks_generator", "blocksnet.preprocessing.blocks_splitter", "blocksnet.preprocessing.land_use_optimizer", "blocksnet.preprocessing.land_use_processor", "blocksnet.utils", "blocksnet.utils.helpers", "blocksnet.utils.service_types", "API documentation", "Contributing", "FAQ", "BlocksNet", "Quickstart", "Generating intermodal graph and calculating accessibility matrix", "City blocks layer generating", "Cases", "Land Use Optimization", "City initialization and methods", "Examples", "Accessibility", "Annealing optimizer", "Centrality", "Connectivity", "Diversity", "Methods", "Integration", "LandUse prediction", "Provision", "Spacematrix", "Vacant Area", "Weighted connectivity", "Pipeline", "Welcome to BlocksNet documentation!"], "terms": {"The": [0, 2, 3, 7, 8, 10, 11, 12, 13, 16, 21, 23, 24, 29, 36, 37, 38, 39, 41, 45, 46, 52, 53], "blocksnet": [0, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "i": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 14, 16, 19, 21, 23, 24, 25, 30, 32, 37, 38, 41, 46, 52, 53], "develop": [0, 19, 30, 52, 53], "maintain": [0, 30], "idu": 0, "team": 0, "institut": 0, "design": 0, "urban": [0, 5, 10, 11, 12, 14, 19, 21, 24, 31, 37, 53], "studi": 0, "an": [0, 2, 3, 8, 10, 13, 19, 21, 24, 30, 31, 48, 53], "educ": [0, 11], "project": [0, 27, 30, 35, 52, 53], "research": [0, 53], "unit": [0, 19, 30, 37, 53], "itmo": [0, 53], "univers": [0, 37, 38, 41, 53], "aim": [0, 41, 53], "interdisciplinari": 0, "compet": 0, "scientif": 0, "approach": 0, "solv": [0, 11, 48, 52, 53], "complex": 0, "problem": [0, 11, 48, 52, 53], "us": [0, 1, 3, 4, 7, 8, 9, 11, 12, 13, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 41, 52, 53], "inform": [0, 3, 16, 19, 25, 32, 38, 52, 53], "technologi": [0, 53], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 30, 48, 52, 53], "principl": 0, "sustain": 0, "social": 0, "orient": [0, 52, 53], "you": [0, 30, 38, 52], "can": [0, 2, 4, 11, 16, 19, 22, 27, 30, 33, 37, 38, 52, 53], "nccr": 0, "nation": [0, 53], "center": 0, "cognit": 0, "tatiana": 0, "churiakova": 0, "manag": [0, 16], "vasilii": 0, "starikov": 0, "lead": 0, "softwar": 0, "engin": 0, "also": [0, 9, 30, 37, 52, 53], "ar": [0, 1, 3, 9, 11, 13, 16, 22, 24, 27, 29, 30, 52], "welcom": [0, 30], "our": [0, 52], "issu": [0, 30], "section": [0, 30], "t": [0, 30, 37, 38, 52], "v": [0, 37], "sudakova": 0, "morozov": 0, "A": [0, 3, 5, 8, 9, 11, 13, 16, 21, 24], "mityagin": 0, "": [0, 3, 8, 16, 24, 30, 35, 37, 38, 41, 47, 52, 53], "digit": 0, "master": [0, 30, 31, 53], "plan": [0, 31, 53], "tool": [0, 53], "gener": [0, 3, 8, 11, 16, 21, 22, 24, 31, 39, 53], "territori": [0, 16, 21, 22, 41, 53], "requir": [0, 4, 19, 30, 31, 52, 53], "intern": 0, "confer": 0, "advanc": [0, 52, 53], "innov": 0, "2023": 0, "artii": 0, "provid": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 21, 22, 52, 53], "locat": [1, 3, 16, 23, 37, 50, 52], "here": [1, 52], "onli": [1, 52], "initi": [1, 3, 16, 20, 24, 37, 39, 53], "citi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 28, 33, 37, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53], "model": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 20, 24, 25, 28, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53], "modul": [1, 3, 11, 15, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 33], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 33, 52], "city_model": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52], "verbos": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 37], "bool": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24], "true": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 21, 24, 35, 37, 38, 41, 46, 48, 50, 52], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 31, 53], "basemethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "block": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 22, 23, 24, 25, 33, 37, 38, 39, 40, 41, 46, 48, 50, 53], "assess": [2, 3, 6, 7, 11, 14, 48, 52, 53], "plot": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 21, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52], "gdf": [2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 23, 27], "vmax": [2, 48], "figsiz": [2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 21, 35, 37, 38, 40, 42, 43, 44, 48, 49, 51, 52], "10": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 21, 24, 34, 35, 37, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52], "data": [2, 3, 5, 6, 7, 10, 11, 12, 14, 16, 21, 23, 25, 34, 35, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "map": [2, 3, 5, 6, 7, 10, 12, 14, 16, 21, 24, 25, 50], "calcul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53], "from": [2, 8, 11, 16, 21, 23, 24, 25, 30, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "given": [2, 3, 7, 11, 12, 16, 21, 24, 27], "static": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 21, 22, 23, 24], "geodatafram": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 21, 22, 23, 24, 25, 27, 37, 38, 50, 52], "float": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 38, 52], "60": [2, 37, 52], "linewidth": [2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 21, 35, 38, 48], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 23, 24, 25, 34, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51], "1": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 24, 25, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "tupl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 21, 24], "int": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 25, 27, 38, 52], "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 52], "geopanda": [2, 5, 6, 7, 10, 11, 12, 14, 34, 35, 37, 38, 50, 52], "contain": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 38, 52], "geometri": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 21, 22, 23, 24, 25, 27, 35, 37, 38, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52], "limit": [2, 11, 22, 53], "upper": [2, 11, 48], "valu": [2, 3, 6, 8, 9, 10, 11, 14, 16, 17, 19, 23, 24, 34, 35, 37, 38, 41, 48, 51, 52, 53], "legend": [2, 35, 37, 48, 52], "default": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 19, 21, 22, 23, 24, 25, 28, 52], "size": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 21, 24], "polygon": [2, 5, 8, 9, 11, 13, 16, 21, 22, 23, 24, 25, 27, 35, 38, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52], "border": [2, 8, 9, 11], "option": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 19, 21, 22, 24, 25, 30, 52], "figur": [2, 5, 6, 7, 8, 9, 10, 12, 14, 16, 21], "return": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 22, 23, 24, 25, 27, 34, 35, 37, 50, 52], "type": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 38, 50, 52, 53], "none": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 21, 22, 23, 25, 35, 38, 47, 52], "which": [2, 10, 11, 16, 22, 23, 24, 30, 53], "It": [2, 16, 30, 37, 38], "instanc": [2, 3, 4, 16, 37], "integ": [2, 46], "repres": [2, 3, 5, 7, 8, 9, 11, 13, 16, 17, 19, 21, 24, 52], "id": [2, 3, 16, 24, 37, 38, 40, 41, 42, 43, 44, 47, 49, 51, 52], "specifi": [2, 8, 10, 11, 13, 16, 21, 22], "simul": [3, 24, 37, 53], "anneal": [3, 24, 37, 39, 45, 53], "optim": [3, 24, 36, 39, 45, 53], "servic": [3, 5, 7, 9, 11, 14, 15, 16, 19, 28, 30, 38, 41, 53], "constrain": 3, "land": [3, 9, 13, 16, 17, 19, 22, 24, 25, 36, 39, 41, 52, 53], "variabl": [3, 4, 8, 11, 12, 13, 16, 17, 21, 23, 24, 25, 27, 37, 48, 52], "service_typ": [3, 11, 16, 37, 38, 41, 48, 52], "servicetyp": [3, 11, 16, 19, 38, 52], "brick": [3, 16, 19, 38, 52], "servicebrick": [3, 16, 19, 38, 52], "object": [3, 13, 16, 18, 19, 21, 22, 23, 24, 25, 35, 38, 41, 52], "specif": [3, 16, 38], "where": [3, 11, 16], "characterist": [3, 8], "quantiti": 3, "properti": [3, 5, 8, 16, 21, 22], "capac": [3, 9, 11, 16, 19, 37, 38, 41, 48, 52], "total": [3, 11, 16, 19, 24, 48, 52], "area": [3, 5, 11, 13, 16, 17, 19, 21, 23, 24, 25, 27, 31, 35, 37, 38, 39, 41, 45, 52, 53], "occupi": [3, 16, 19], "to_dict": [3, 16, 19, 38, 52], "convert": [3, 16, 19, 24], "dictionari": [3, 8, 9, 11, 16, 19, 24, 25], "represent": [3, 16, 19], "whether": [3, 4, 16, 19, 21, 24, 52], "integr": [3, 16, 19, 39, 45, 53], "dict": [3, 4, 8, 9, 11, 16, 19, 24, 25], "indic": [3, 5, 16, 19, 37, 38, 41, 52], "land_us": [3, 9, 16, 19, 24, 25, 35, 37, 38, 41, 47, 52], "landus": [3, 9, 16, 17, 19, 24, 25, 37, 38, 39, 41, 45, 52], "fsi": [3, 8, 16, 38, 49, 52], "gsi": [3, 16, 38, 52], "spatial": [3, 8, 11, 24, 27, 37, 52, 53], "being": [3, 11, 53], "evalu": [3, 11, 24, 53], "floor": [3, 8, 16], "space": [3, 8, 16], "index": [3, 7, 8, 16, 18, 23, 25, 30, 41, 46, 48, 52], "ground": [3, 16], "site_area": [3, 16, 38, 52], "get": [3, 8, 16, 35, 38, 39, 52], "site": [3, 16, 34, 35, 50], "footprint_area": [3, 16, 38, 52], "footprint": [3, 16], "build_floor_area": [3, 16, 38, 52], "buildabl": 3, "integrated_area": 3, "determin": [3, 6, 7, 10, 14, 24, 37, 52], "non_integrated_area": 3, "non": [3, 13, 16, 30, 53], "living_area": [3, 16, 38, 52], "live": [3, 16, 19], "residenti": [3, 13, 16, 17, 25, 35, 37, 38, 41, 47, 52], "popul": [3, 10, 11, 14, 16, 19, 38, 41, 48, 51, 52, 53], "estim": [3, 19, 52, 53], "demand": [3, 11, 19, 30, 38, 48, 52], "build": [3, 13, 16, 19, 23, 30, 35, 38, 41, 52, 53], "annealingoptim": [3, 37, 41, 52], "on_iter": [3, 37], "callabl": 3, "list": [3, 4, 8, 9, 13, 16, 19, 21, 23, 24, 25, 29, 37, 38, 41], "maxim": 3, "scenario": [3, 52, 53], "provis": [3, 37, 39, 41, 45, 53], "function": [3, 24, 27, 30, 37, 53], "certain": [3, 13, 27, 41, 45, 52], "callback": 3, "call": [3, 52], "after": [3, 16, 37, 52], "each": [3, 6, 7, 8, 9, 10, 11, 12, 14, 22, 23, 24, 52], "iter": [3, 11, 24, 37, 52, 53], "current": [3, 11, 16, 24, 38], "number": [3, 8, 12, 16, 19, 23, 24, 52], "best": [3, 24, 30, 37, 41], "found": [3, 16, 22, 37], "so": [3, 30, 38, 41, 46, 53], "far": 3, "_check_constraint": 3, "x": [3, 21, 24, 30, 37, 38, 41, 52], "check": [3, 9, 16, 24, 30, 35, 50, 52], "solut": [3, 11, 53], "satisfi": [3, 24], "all": [3, 6, 9, 11, 14, 16, 21, 23, 24, 30, 37, 50], "constraint": [3, 24], "correspond": 3, "fals": [3, 9, 11, 16, 19, 24, 37, 38, 41, 47, 50, 52], "otherwis": [3, 9, 16, 24, 37], "_perturb": [3, 24], "perturb": [3, 24], "modifi": [3, 24, 52], "randomli": [3, 24], "chosen": [3, 52], "_generate_initial_x": [3, 24], "blocks_lu": [3, 37, 41, 52], "str": [3, 8, 9, 11, 12, 16, 17, 19, 21, 25, 38], "name": [3, 9, 12, 16, 18, 19, 21, 22, 23, 24, 25, 35, 37, 38, 41, 52], "weight": [3, 5, 8, 14, 16, 21, 39, 45, 52], "_generate_ind": 3, "to_gdf": [3, 18, 24, 37, 41, 52], "result": [3, 11, 12, 24, 27, 37, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52], "gpd": [3, 5, 8, 9, 10, 11, 12, 13, 16, 21, 22, 23, 24, 25, 27, 34, 35, 37, 38, 52], "to_bricks_df": [3, 37, 41, 52], "datafram": [3, 11, 16, 21, 24, 37, 48, 52], "about": [3, 19, 32, 38, 52, 53], "pd": [3, 11, 16, 21, 24, 37, 38, 48, 52], "_get_clear_df": [3, 52], "construct": [3, 35], "chang": [3, 11, 24, 30, 37], "treat": 3, "clear": [3, 16], "relat": [3, 16, 17, 24], "to_df": [3, 52], "blocks_fsi": [3, 37, 41, 52], "blocks_gsi": [3, 37, 41, 52], "t_max": [3, 24], "100": [3, 13, 24, 34, 35, 37, 38, 47, 52], "t_min": [3, 24], "001": [3, 24], "rate": [3, 24, 37, 41], "95": [3, 23, 34, 37, 41], "max_it": [3, 24, 37, 41], "1000": [3, 10, 19, 37, 41, 52], "execut": 3, "process": [3, 16, 25, 27, 37], "maximum": [3, 13, 19, 24], "temperatur": [3, 24, 37], "minimum": [3, 11, 13, 16, 22, 24, 25, 27], "1e": [3, 24], "3": [3, 11, 24, 25, 30, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51], "cool": [3, 24], "abc": [4, 16], "basemodel": [4, 16, 19], "implement": [4, 53], "instanceof": 4, "displai": [4, 16, 24], "progress": [4, 24], "arg": [4, 16, 18, 21, 22, 23, 24, 25], "kwarg": [4, 18, 21, 22, 23, 24, 25, 35], "ani": [4, 9, 16, 25, 30, 38, 52], "main": [4, 15, 21, 53], "should": [4, 16, 52], "overridden": 4, "child": 4, "length": [4, 8, 13, 16, 37, 50], "argument": [4, 16], "arbitrari": 4, "keyword": 4, "rais": [4, 16, 23, 25], "notimplementederror": [4, 16], "If": [4, 8, 9, 11, 13, 16, 22, 23, 24, 25, 30, 38], "analyz": [5, 8, 13, 53], "distribut": [5, 7, 23, 52], "divers": [5, 39, 42, 45, 53], "point": [5, 16, 23, 37, 38], "interest": 5, "measur": [5, 24], "connect": [5, 10, 14, 16, 21, 39, 45, 53], "comput": [5, 8, 10, 11, 16, 19, 21, 24, 30, 53], "variou": [5, 9, 11, 13, 16], "geometr": 5, "network": [5, 8, 16, 21, 34, 52, 53], "connectivity_weight": 5, "density_weight": 5, "diversity_weight": 5, "metric": [5, 8, 27, 53], "line": [5, 6, 7, 10, 12, 14, 16, 34, 37], "width": [5, 6, 7, 10, 12, 14, 16, 21, 22, 27], "densiti": [5, 10, 42], "median": [6, 11, 14, 48, 52], "access": [6, 14, 16, 19, 20, 21, 38, 39, 45, 46, 48, 53], "matrix": [6, 14, 16, 21, 39, 53], "row": [6, 14, 34, 35, 37, 41, 52], "_shannon_index": 7, "services_seri": 7, "shannon": 7, "count": [7, 37, 38, 41, 52], "panda": [7, 11, 12, 37, 38, 48, 52], "seri": [7, 12, 18, 25], "differ": [7, 11, 16, 17, 27, 36, 50, 53], "within": [7, 10, 13, 14, 16, 19, 22, 23, 24, 38, 53], "integrationtyp": [8, 46], "enum": [8, 11, 17, 25], "enumer": [8, 17], "local": [8, 22, 30, 52], "global": 8, "weighttyp": 8, "angular": 8, "angl": 8, "mm_len": 8, "graph": [8, 16, 21, 24, 37, 39, 53], "thi": [8, 10, 11, 13, 19, 30, 37, 38, 50, 52, 53], "extend": [8, 13, 25], "includ": [8, 9, 11, 13, 16, 25, 52, 53], "cluster": [8, 12, 23, 46, 53], "nx": [8, 21, 24, 37], "road": [8, 13, 22, 35, 52], "validate_graph": 8, "valid": [8, 16, 19, 21, 23, 24, 25], "validate_model": [8, 16], "necessari": [8, 30, 33, 37, 53], "exist": [8, 13, 16, 23, 30, 38, 52, 53], "column": [8, 10, 11, 16, 22, 23, 25, 34, 35, 37, 38, 41, 46, 48, 52], "color": [8, 35, 38], "edg": [8, 16, 21, 37, 52], "_get_dual_graph": 8, "dual": 8, "intersect": [8, 16, 24, 25, 35, 38, 52], "relationship": [8, 16], "between": [8, 10, 16, 21, 24, 35, 38, 52, 53], "integration_block": 8, "n_cluster": [8, 23], "4": [8, 13, 23, 34, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51], "perform": [8, 11, 27, 30, 45, 52, 53], "fsi_column": 8, "integration_column": 8, "form": [8, 22, 23], "addit": [8, 53], "label": [8, 24], "integration_typ": [8, 46], "weight_typ": 8, "local_radiu": 8, "5": [8, 13, 34, 35, 37, 38, 40, 41, 42, 44, 46, 48, 50], "radiu": [8, 10], "landusepredict": [9, 47, 52], "predict": [9, 39, 45, 52, 53], "cosin": 9, "similar": [9, 52], "_get_land_uses_servic": 9, "retriev": [9, 16, 19, 52], "_get_blocks_gdf": [9, 11], "_get_unique_per_landus": 9, "landuse_item": 9, "find": [9, 24, 35, 37, 52, 53], "uniqu": [9, 16, 17, 19, 22, 52], "tag": [9, 22, 50, 52], "_intersect": 9, "set1": 9, "set2": 9, "two": [9, 16, 24, 38], "set": [9, 21, 24, 25, 35, 37, 48, 50, 52], "have": [9, 16, 21, 30, 37, 38, 52], "common": 9, "element": [9, 50, 53], "_predict_block_landuse_cosine_similar": 9, "block_vector": 9, "landuse_vector": 9, "return_prob": 9, "_predict_block_landus": 9, "codes_in_block": 9, "use_cos_similar": 9, "kei": [9, 11, 25, 38, 52], "boolean": 9, "presenc": 9, "code": [9, 16, 19, 25, 30, 38, 52], "categori": [9, 19], "np": [9, 51], "arrai": 9, "first": [9, 16, 37, 38, 52], "collect": [9, 24], "second": [9, 16], "present": [9, 25, 32], "vector": 9, "probabl": 9, "made": 9, "unpredict": 9, "populationcentr": [10, 42], "visual": [10, 11, 12, 37, 38, 52], "central": [10, 39, 45, 53], "connectivity_radiu": 10, "consid": [10, 13, 53], "meter": [10, 16, 19], "ad": [10, 12, 16, 53], "degre": 10, "normal": 10, "combin": 10, "them": [10, 23, 30], "final": [10, 30, 37], "provisionmethod": [11, 48, 52], "greedi": [11, 52], "gravit": [11, 48], "linear": [11, 34, 53], "distanc": [11, 13, 16, 21, 38, 41, 46], "taken": 11, "account": [11, 14, 52, 53], "squar": [11, 16, 19, 24], "linearli": 11, "max_depth": 11, "healthcar": 11, "etc": [11, 15, 22, 53], "multipl": 11, "like": [11, 15, 22, 30, 37], "alloc": [11, 24], "program": 11, "transport": [11, 17, 21, 25, 35, 37, 38, 41, 52], "stat": [11, 48, 52], "basic": [11, 19, 52], "statist": [11, 48, 52], "mean": [11, 16, 23, 48, 52], "min": [11, 16, 38, 48, 52], "max": [11, 16, 37, 48, 52], "ratio": [11, 13, 16, 24, 37], "get_bound": [11, 48], "update_df": [11, 48, 52], "lower": [11, 48], "bound": [11, 21, 35, 48], "self_suppli": 11, "inch": 11, "updat": [11, 16, 24, 30, 52], "classmethod": [11, 16, 18, 21, 24], "divid": [11, 27, 51], "sum": [11, 24, 35, 52], "met": 11, "demand_within": [11, 52], "overal": [11, 48], "_get_lower_bound": 11, "assum": 11, "meet": 11, "its": [11, 16, 19, 24, 52], "up": [11, 30, 35, 52, 53], "_get_upper_bound": 11, "fulli": 11, "full": 11, "lower_bound": 11, "upper_bound": 11, "allow": [11, 16, 21, 23, 24, 27, 53], "own": [11, 38], "directli": 11, "demand_left": [11, 52], "capacity_left": [11, 52], "_lp_provis": [11, 48, 52], "depth": 11, "lp": [11, 48, 52], "solver": 11, "loop": 11, "itself": 11, "till": 11, "left": 11, "demand_without": [11, 52], "_greedy_provis": 11, "assign": [11, 12, 24], "closest": 11, "avail": [11, 16, 19, 38], "number_of_clust": 12, "11": [12, 37, 38, 41, 42, 48, 49, 52], "random_st": 12, "morphotyp": [12, 53], "kmean": 12, "random": [12, 41, 52], "state": [12, 16, 52], "reproduc": 12, "strelka": 12, "_get_strelka_morphotyp": 12, "attribut": [12, 16, 21, 25, 35], "_name_spacematrix_morphotyp": 12, "_get_spacematrix_morphotyp": 12, "identifi": [13, 16, 19, 21, 22, 37, 53], "vacant": [13, 39, 45, 53], "vacantarea": [13, 50], "area_to_length_min": 13, "area_min": 13, "area_to_mrr_area_min": 13, "path_buff": 13, "roads_buff": 13, "buildings_buff": 13, "blocks_buffer_min": 13, "20": [13, 34, 35, 37, 52], "blocks_buffer_max": 13, "40": [13, 27, 35, 41, 52], "geograph": 13, "featur": [13, 30], "natur": 13, "amen": 13, "filter": [13, 16, 18, 19, 22, 23, 35, 52], "shape": [13, 21, 23, 24, 25, 34, 35, 37], "proxim": [13, 24], "rotat": 13, "rectangl": 13, "mrr": 13, "buffer": [13, 24, 37], "around": 13, "path": [13, 16, 34, 35, 38, 52], "footwai": 13, "_dwn_other": 13, "download": 13, "standard": [13, 25], "geoseri": [13, 18], "_dwn_leisur": 13, "leisur": 13, "_dwn_landus": 13, "exclud": [13, 16, 35, 38, 52], "_dwn_amen": 13, "_dwn_build": 13, "appli": [13, 38, 52], "_dwn_natur": 13, "bai": 13, "_dwn_waterwai": 13, "waterwai": 13, "_dwn_highwai": 13, "highwai": 13, "_dwn_path": 13, "_dwn_railwai": 13, "railwai": [13, 22, 35, 52], "subwai": 13, "done": [13, 30], "whole": [13, 16], "weightedconnect": [14, 51], "take": [14, 16, 30, 52, 53], "describ": [15, 16, 30, 38], "entiti": [15, 19], "is_integr": [16, 19, 37, 38, 41, 52], "abstract": 16, "must": [16, 19, 22, 23, 24, 25, 30, 52], "greater": [16, 19], "than": [16, 19, 50, 52], "_get_min_brick": 16, "field": [16, 19, 53], "liter": 16, "statu": 16, "compar": 16, "either": 16, "against": 16, "_fill_capacity_and_area": 16, "fill": [16, 27, 35, 52], "blockservic": 16, "some": [16, 26, 27, 32, 37, 38, 46, 52], "union": 16, "multipolygon": [16, 21, 22, 25, 52], "befor": 16, "make": [16, 30, 41, 50, 52, 53], "sure": [16, 30], "buildingservic": 16, "out": [16, 22, 53], "need": [16, 19, 52], "attach_geometri": 16, "self": 16, "attach": 16, "across": 16, "parent": 16, "insid": [16, 27, 52], "equal": [16, 19], "dedic": 16, "non_living_area": [16, 38, 52], "activ": [16, 30], "number_of_floor": [16, 38, 52], "storei": 16, "empti": [16, 19], "is_liv": [16, 38, 52], "update_servic": [16, 38, 52], "remov": [16, 21, 27, 38, 52], "validate_land_us": [16, 19], "transform": 16, "all_servic": 16, "those": 16, "thu": 16, "least": 16, "one": [16, 20, 24, 30, 52, 53], "living_demand": [16, 38, 52], "per": [16, 19], "person": 16, "mxi": [16, 38, 49, 52], "mix": 16, "l": [16, 38, 49, 52], "osr": [16, 38, 52], "open": [16, 31, 53], "share_liv": [16, 38, 52], "share": [16, 24, 25, 37], "business_area": [16, 38, 52], "busi": [16, 17, 25, 37, 38, 41, 52], "share_busi": [16, 38, 52], "zero": [16, 51], "buildings_ind": 16, "territory_ind": 16, "services_ind": 16, "land_use_service_typ": [16, 38], "get_services_gdf": [16, 38], "get_buildings_gdf": [16, 38], "simplifi": [16, 38, 52], "update_build": [16, 38, 52], "from_gdf": 16, "follow": [16, 23, 25, 30, 37, 52, 53], "For": [16, 37], "more": [16, 52], "pleas": [16, 30], "__getitem__": 16, "building_id": [16, 38], "support": [16, 30, 53], "_": 16, "exampl": [16, 35, 36, 37, 45, 52, 53], "456": 16, "123": [16, 38, 40, 52], "block_id": [16, 22, 37, 38, 41, 50, 52], "keyerror": 16, "__hash__": [16, 19], "hash": [16, 19], "acc_mx": [16, 33, 34, 37, 38, 52], "cr": [16, 21, 22, 23, 25, 27, 35, 37, 38, 52], "pyproj": [16, 22, 27], "coordin": [16, 21, 23, 25, 35, 52], "refer": [16, 23, 25, 52], "system": [16, 23, 25, 35, 52, 53], "accessibility_matrix": [16, 52], "travel": [16, 52], "time": [16, 19, 41, 46, 52], "minut": [16, 19], "drive": 16, "walk": 16, "intermod": [16, 21, 39, 53], "anoth": 16, "_block": [16, 41, 46, 52], "_service_typ": 16, "15": [16, 34, 37, 38, 41, 42, 48, 49, 50, 52], "max_travel_tim": [16, 38], "get_land_use_service_typ": 16, "get_blocks_gdf": [16, 38, 41, 46, 52], "update_land_us": [16, 38, 52], "add_service_typ": [16, 38], "add": [16, 30, 38], "new": [16, 30, 38], "get_dist": [16, 38], "block_a": 16, "block_b": 16, "get_out_edg": 16, "outgo": 16, "get_in_edg": 16, "incom": 16, "epsg": [16, 35, 38, 52], "loaded_service_typ": 16, "load": [16, 37, 50, 52], "associ": [16, 19], "same": [16, 38], "match": [16, 19, 23, 25], "assertionerror": [16, 23, 25], "doe": 16, "do": [16, 21, 23, 25, 30], "nor": 16, "thei": [16, 23, 38], "method": [16, 35, 37, 39, 48, 51, 53], "did": [16, 38, 52], "mai": [16, 19, 39], "buldingservic": 16, "pitch": [16, 37, 38, 41, 52], "playground": [16, 37, 41], "alreadi": [16, 30, 52], "request": 16, "service_type_nam": 16, "school": [16, 19, 37, 38, 41, 48, 52], "computer_club": 16, "__str__": [16, 19], "string": [16, 19, 25], "from_pickl": [16, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "file_path": 16, "pickl": [16, 34, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52], "file": [16, 30, 38, 50, 52], "to_pickl": [16, 34, 38, 52], "save": [16, 38, 52], "commerci": 17, "recreat": [17, 24, 25, 35, 37, 38, 41, 52], "special": [17, 25, 37], "purpos": 17, "industri": [17, 25, 37], "agricultur": [17, 25, 37, 47], "baseschema": [18, 21, 22, 23, 24, 25], "dataframemodel": 18, "idx": 18, "config": [18, 21, 22, 23, 24, 25], "strict": 18, "add_missing_column": 18, "check_geometri": 18, "parking_area": [19, 38, 52], "typic": 19, "peopl": [19, 52], "accommod": 19, "serv": [19, 38], "park": [19, 37, 38, 41], "averag": 19, "reach": 19, "get_brick": 19, "criteria": 19, "validate_brick": 19, "calculate_in_ne": 19, "help": [20, 27, 39, 48, 53], "split": [20, 23, 24, 35], "iduedu": [21, 34, 53], "wrapper": 21, "user": [21, 48, 51, 53], "blocksschema": [21, 22, 23, 24, 25], "schema": [21, 23, 24, 25, 35, 52], "handl": 21, "geospati": 21, "_geom_typ": [21, 23, 24, 25], "accessibilityprocessor": [21, 34, 37, 52], "processor": 21, "convex": 21, "hull": 21, "enclos": 21, "iduedu_cr": 21, "2": [21, 25, 30, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51], "networkx": [21, 24, 37], "height": 21, "_get_broken_nod": 21, "broken": 21, "node": [21, 37, 52], "y": [21, 37], "_get_island_nod": 21, "island": 21, "stai": 21, "_fix_graph": 21, "inplac": 21, "get_intermodal_graph": [21, 34, 52], "clip_by_bound": 21, "keep_routes_geom": 21, "clip": 21, "keep": [21, 30], "rout": [21, 52], "get_accessibility_matrix": [21, 34, 37, 52], "time_min": [21, 37, 52], "e": [21, 35, 53], "g": [21, 53], "parcel": 22, "boundari": [22, 35, 52], "water": [22, 35, 52], "boundariesschema": 22, "roadsschema": 22, "railwaysschema": 22, "waterschema": 22, "blocksgener": [22, 52], "obtain": [22, 38, 52, 53], "via": [22, 30, 38], "osmnx": [22, 52], "linestr": [22, 37], "By": 22, "osm": [22, 35, 52], "rail": 22, "riverbank": 22, "pond": 22, "run": [22, 23, 24, 25, 30, 35, 37, 52], "min_block_width": 22, "local_cr": [22, 35, 52], "defin": [22, 52, 53], "bodi": 22, "small": [22, 27, 37], "bottleneck": 22, "_get_enclosur": 22, "barrier": 22, "enclosur": [22, 35, 52], "_reindex_block": 22, "reindex": 22, "ensur": 22, "ha": [22, 30, 50], "buildingsschema": 23, "blockssplitt": 23, "points_quantil": 23, "98": 23, "area_quantil": 23, "quantil": 23, "_drop_index_column": 23, "drop": [23, 27, 35, 37, 50, 52], "_split_block": 23, "smaller": [23, 24, 37, 41], "region": 23, "voronoi": 23, "diagram": 23, "k": 23, "landuseoptim": [24, 37], "tqdm": [24, 38], "_split_polygon": 24, "geometrycollect": 24, "part": [24, 53], "cut": [24, 37], "along": 24, "midpoint": 24, "oper": [24, 27, 35, 45], "_is_block_larg": 24, "block_geometri": 24, "too": 24, "larg": 24, "aspect": [24, 37], "exce": 24, "_split_large_block": 24, "blocks_gdf": [24, 33, 37, 38], "accord": [24, 30, 37], "predefin": [24, 25, 41], "rule": [24, 37], "ones": 24, "_get_adjacency_graph": 24, "adjac": [24, 37], "detect": 24, "buffer_min": 24, "configur": 24, "_check_adj_rul": 24, "_check_area_rang": 24, "fall": 24, "rang": 24, "_check_ratio_rang": 24, "to_shares_dict": [24, 37], "_object": 24, "lu_shar": [24, 37], "deviat": 24, "target": 24, "actual": [24, 52], "99": [24, 35, 52], "10000": [24, 41, 48], "algorithm": [24, 53], "classifi": 25, "zone": [25, 35, 37], "zonesschema": 25, "pandera": 25, "enforc": 25, "processedblocksschema": 25, "nullabl": 25, "landuseprocessor": 25, "zone_to_land_us": 25, "\u04421\u04361": 25, "\u04421\u04362": 25, "\u04422\u04361": 25, "\u04422\u0436\u04342": 25, "\u04423\u04361": [25, 35], "\u04423\u04362": 25, "\u04423\u0436\u04343": 25, "\u0442\u04341": 25, "\u0442\u04342": 25, "\u0442\u04343": 25, "\u0442\u04381": 25, "\u0442\u04382": 25, "\u0442\u04383": [25, 35], "\u0442\u04384": 25, "\u0442\u043a1": 25, "\u0442\u043a2": 25, "\u0442\u043a3": 25, "\u0442\u043f1": 25, "\u0442\u043f2": 25, "\u0442\u043f3": 25, "\u0442\u043f4": 25, "\u0442\u043f\u04341": 25, "\u0442\u043f\u04342": 25, "\u0442\u04400": 25, "\u0442\u04401": 25, "\u0442\u04402": [25, 35], "\u0442\u04403": 25, "\u0442\u04404": [25, 35], "\u0442\u04405": 25, "\u0442\u04411": 25, "\u0442\u04412": 25, "\u0442\u0443": 25, "default_zone_to_land_us": 25, "min_intersect": 25, "threshold": 25, "cover": 25, "df_with_attribut": 25, "record": [25, 30], "df": [25, 37, 52], "classif": 25, "utili": 26, "fill_hol": 27, "hole": [27, 35, 52], "drop_contained_geometri": 27, "other": [27, 34, 37, 52], "without": 27, "filter_bottleneck": 27, "projected_cr": 27, "min_width": 27, "narrow": 27, "place": [27, 52], "get_polygon_aspect_ratio": 27, "below": [29, 32, 39], "we": [30, 37, 38, 41, 46, 52], "bug": 30, "enhanc": 30, "work": [30, 41, 53], "idea": 30, "extens": 30, "discuss": 30, "familiar": 30, "yourself": 30, "layout": [30, 37], "major": 30, "To": [30, 52], "start": [30, 33], "librari": [30, 31, 33, 34, 39, 52, 53], "action": 30, "clone": 30, "repositori": 30, "git": 30, "http": 30, "github": 30, "com": 30, "aimclub": 30, "creat": [30, 52, 53], "virtual": 30, "environ": 30, "exact": [30, 52], "packag": [30, 34, 35, 50], "version": 30, "venv": [30, 34, 35, 50], "bin": 30, "instal": 30, "edit": 30, "mode": 30, "depend": 30, "dev": 30, "pre": 30, "commit": 30, "hook": 30, "branch": 30, "checkout": 30, "b": [30, 35], "new_branch_nam": 30, "newli": 30, "rememb": 30, "never": 30, "copi": [30, 37, 48], "control": 30, "test": [30, 52], "command": 30, "pass": [30, 52], "readm": 30, "when": 30, "re": [30, 38, 46], "modified_fil": 30, "push": 30, "u": [30, 37, 53], "origin": 30, "my": 30, "go": 30, "web": 30, "page": 30, "fork": 30, "repo": 30, "click": 30, "pr": 30, "send": 30, "review": 30, "look": 30, "confus": 30, "through": 30, "checklist": 30, "everyth": [30, 52], "effici": 30, "accept": 30, "wai": [30, 52], "reflect": 30, "anyth": 30, "involv": 30, "properli": 30, "comment": 30, "docstr": 30, "explain": 30, "rational": 30, "behind": 30, "obviou": 30, "practic": 30, "doubl": 30, "easi": [30, 53], "pip": [30, 33], "anaconda": 30, "python": 30, "complic": 30, "most": 30, "won": 30, "merg": 30, "becaus": [30, 38], "want": 30, "care": 30, "sphinx": 30, "autodoc": 30, "automodul": 30, "module_nam": 30, "sever": 30, "script": 30, "doc": 30, "your_name_for_fil": 30, "rst": 30, "header": 30, "underlin": 30, "sign": 30, "crucial": 30, "toctre": 30, "api": [30, 53], "choos": [30, 35], "appropri": 30, "repeat": 30, "d": 30, "step": 30, "previou": [30, 52], "Be": 30, "happi": 30, "travi": 30, "ci": 30, "automat": 30, "qualiti": 30, "coverag": 30, "back": 30, "shortli": 30, "come": 30, "red": [30, 38], "address": 30, "error": [30, 50], "guid": [30, 33], "well": [30, 53], "written": 30, "tpot": 30, "framework": 30, "frequent": 31, "ask": 31, "question": 31, "answer": 31, "import": [32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52], "quickstart": [32, 53], "contribut": [32, 53], "faq": [32, 53], "quick": 33, "next": [33, 35], "o": [34, 35, 38, 52], "data_path": [34, 35, 52], "read_parquet": [34, 35, 38, 52], "join": [34, 35, 38, 52], "parquet": [34, 35, 38, 52], "ap": [34, 37, 52], "home": [34, 35, 50], "vasilstar": [34, 35, 50], "masterplan": [34, 35, 50], "lib": [34, 35, 50], "python3": [34, 35, 50], "py": [34, 35, 50, 51], "90": 34, "runtimewarn": [34, 35, 51], "invalid": [34, 35, 51], "encount": [34, 35, 50, 51], "line_locate_point": 34, "head": [34, 35, 38, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52], "6": [34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52], "7": [34, 37, 38, 40, 42, 47, 48, 51, 52], "8": [34, 37, 38, 42, 47, 48, 52], "9": [34, 37, 38, 40, 42, 47, 48, 49, 52], "16310": 34, "16311": 34, "16312": 34, "16313": 34, "16314": 34, "16315": [34, 35], "16316": [34, 35], "16317": [34, 35], "16318": [34, 35], "16319": [34, 35], "000000": [34, 42, 44, 52], "18": [34, 35, 38, 41, 52], "718750": [34, 52], "234375": [34, 52], "17": [34, 37, 41, 51, 52], "21875": [34, 52], "30": [34, 35, 38, 42, 48, 52], "296875": [34, 52], "27": [34, 48, 52], "390625": 34, "671875": [34, 52], "23": [34, 38, 41, 48, 52], "281250": [34, 52], "78": [34, 43, 52], "6875": [34, 43], "81": [34, 42, 43], "2500": 34, "76": 34, "5625": [34, 43], "102": [34, 48], "97": 34, "5000": [34, 52], "132": 34, "250": [34, 35, 38, 52], "130": 34, "8750": 34, "142": [34, 35, 38, 40, 42, 43, 44, 47, 49, 51], "125": [34, 35, 41], "247": 34, "625": 34, "228": [34, 52], "124": [34, 35, 52], "6250": [34, 43], "859375": 34, "19": [34, 37, 38, 51, 52], "015625": 34, "65625": [34, 52], "25": [34, 38, 48, 52], "250000": 34, "765625": 34, "79": [34, 41], "4375": [34, 52], "74": [34, 51], "7500": 34, "500": 34, "129": [34, 48], "0000": [34, 43], "140": 34, "245": [34, 52], "875": 34, "226": 34, "112": 34, "796875": 34, "968750": [34, 52], "062500": [34, 52], "28": [34, 35, 41, 52], "343750": [34, 52], "953125": 34, "71": [34, 38, 51], "69": [34, 38, 41], "8125": [34, 52], "0625": [34, 52], "135": 34, "375": 34, "240": 34, "221": [34, 38, 52], "937500": [34, 52], "449219": 34, "421875": 34, "00000": [34, 52], "21": [34, 37, 38, 52], "109375": 34, "24": [34, 35, 41, 47, 52], "984375": 34, "781250": [34, 52], "16": [34, 35, 37, 38, 41, 48, 50, 52], "593750": [34, 52], "3125": [34, 43], "1250": [34, 38], "1875": 34, "128": [34, 52], "139": 34, "750": 34, "113": 34, "3750": 34, "31": [34, 38, 48, 52], "906250": 34, "734375": 34, "28125": [34, 52], "125000": [34, 52], "429688": 34, "89": [34, 37], "92": [34, 52], "87": [34, 38, 52], "108": 34, "143": 34, "141": 34, "153": [34, 37], "000": 34, "258": [34, 48], "239": 34, "16320": [34, 35, 38, 47], "estimate_utm_cr": [35, 52], "to_cr": [35, 38, 52], "lt": [35, 37, 38, 41, 47, 52], "32636": [35, 38], "gt": [35, 37, 38, 52], "wg": 35, "84": [35, 41, 43], "utm": 35, "36n": 35, "axi": [35, 38, 52], "info": [35, 38, 48, 52], "cartesian": 35, "east": 35, "metr": 35, "n": 35, "north": 35, "36": [35, 38, 52], "northern": 35, "hemispher": 35, "equat": 35, "onshor": 35, "offshor": 35, "belaru": 35, "cypru": 35, "egypt": 35, "ethiopia": 35, "finland": 35, "israel": 35, "jordan": 35, "kenya": 35, "lebanon": 35, "moldova": 35, "norwai": 35, "russian": 35, "feder": 35, "saudi": 35, "arabia": 35, "sudan": 35, "syria": 35, "t\u00fcrkiy": 35, "turkei": 35, "uganda": 35, "ukrain": 35, "transvers": 35, "mercat": 35, "datum": 35, "world": 35, "geodet": 35, "1984": 35, "ensembl": 35, "ellipsoid": 35, "prime": 35, "meridian": 35, "greenwich": 35, "bg": [35, 52], "2024": [35, 38, 52], "09": [35, 38, 41, 48, 52], "22": [35, 38, 41, 47, 52], "01": [35, 38, 52], "51": [35, 37, 40, 41, 51, 52], "739": 35, "preprocess": [35, 37, 38, 52, 53], "blocks_gener": [35, 52], "__init__": [35, 52], "754": 35, "103": [35, 52], "775": 35, "109": [35, 48, 52], "782": 35, "115": [35, 52], "794": 35, "58": [35, 38, 40, 41, 42, 48, 52], "905": 35, "161": [35, 52], "984": [35, 38], "170": [35, 52], "02": [35, 37, 38, 41, 48, 52], "04": [35, 38, 52], "523": 35, "174": [35, 52], "05": [35, 37, 38, 52], "595": 35, "178": [35, 52], "overlap": [35, 52], "07": [35, 41, 48], "691": 35, "192": [35, 38, 52], "821": [35, 38], "199": [35, 52], "355560": 35, "390": 35, "6648337": 35, "904": 35, "355563": 35, "648": 35, "355572": 35, "149": [35, 38, 40, 42, 43, 44, 47, 49, 51], "6648335": 35, "572": 35, "355567": 35, "560": 35, "355583": 35, "354": [35, 52], "355923": 35, "6648257": 35, "264": [35, 52], "355912": 35, "941": [35, 38], "355930": 35, "255": 35, "set_axis_off": [35, 37, 38, 41, 46, 48, 52], "representative_point": [35, 37, 38], "37": [35, 38, 52], "13": [35, 41, 48, 52], "49": [35, 52], "761": 35, "blocks_splitt": 35, "164": 35, "duplic": 35, "29": [35, 41, 52], "980": 35, "173": 35, "393": 35, "182": 35, "33": [35, 38, 52], "83": [35, 37], "00": [35, 37, 38, 47, 48, 52], "41": [35, 38, 41, 52], "66it": 35, "963": 35, "voronoi_polygon": 35, "toler": 35, "extend_to": 35, "only_edg": 35, "48": [35, 38, 52], "87it": [35, 47], "50": [35, 38, 52], "55": [35, 40, 48, 52], "75it": 35, "127": 35, "00it": 35, "44": [35, 38, 52], "39it": 35, "354918": [35, 38, 40, 42, 43, 44, 47, 49, 51], "622": [35, 38, 40, 42, 43, 44, 47, 49, 51], "6625258": [35, 38, 40, 42, 43, 44, 47, 49, 51], "829": [35, 38, 40, 42, 43, 44, 47, 49, 51], "354901": [35, 38, 40, 42, 43, 44, 47, 49, 51], "464": [35, 38, 40, 41, 42, 43, 44, 47, 49, 51], "355412": [35, 38, 40, 42, 43, 44, 47, 49, 51], "6623378": [35, 38, 40, 42, 43, 44, 47, 49, 51], "355411": [35, 38, 40, 42, 43, 44, 47, 49, 51], "700": [35, 38, 40, 42, 43, 44, 47, 49, 51, 52], "353934": [35, 38, 40, 42, 43, 44, 47, 49, 51], "329": [35, 38, 40, 42, 43, 44, 47, 49, 51], "6625429": [35, 38, 40, 42, 43, 44, 47, 49, 51], "433": [35, 38, 40, 42, 43, 44, 47, 49, 51], "353923": [35, 38, 40, 42, 43, 44, 47, 49, 51], "453": [35, 38, 40, 42, 43, 44, 47, 49, 51], "355099": [35, 38, 40, 42, 43, 44, 47, 49, 51], "099": [35, 38, 40, 42, 43, 44, 47, 49, 51], "6623847": [35, 38, 40, 42, 43, 44, 47, 49, 51], "765": [35, 38, 40, 42, 43, 44, 47, 49, 51], "355074": [35, 38, 40, 42, 43, 44, 47, 49, 51], "808": [35, 38, 40, 42, 43, 44, 47, 49, 51], "352766": [35, 38, 40, 42, 43, 44, 47, 49, 51], "168": [35, 38, 40, 42, 43, 44, 47, 49, 51], "6621954": [35, 38, 40, 42, 43, 44, 47, 49, 51], "748": [35, 38, 40, 42, 43, 44, 47, 49, 51], "352744": [35, 38, 40, 42, 43, 44, 47, 49, 51], "412": [35, 38, 40, 42, 43, 44, 47, 49, 51], "335210": 35, "252": 35, "6655823": 35, "328": 35, "335105": 35, "217": 35, "315582": 35, "435": 35, "6679561": 35, "357": 35, "315523": 35, "467": 35, "316419": 35, "909": [35, 52], "6679189": 35, "653": 35, "316319": 35, "749": 35, "315709": 35, "232": 35, "6679519": 35, "841": [35, 52], "315748": 35, "877": [35, 52], "335817": 35, "591": [35, 48], "6619414": 35, "920": 35, "335727": 35, "256": 35, "38": [35, 37, 38, 52], "52": [35, 38, 52], "lup": [35, 47, 52], "53": [35, 38, 48, 52], "56": [35, 52], "345": 35, "land_use_proccessor": 35, "183": 35, "overlai": [35, 50], "06": [35, 38, 48, 52], "119": 35, "196": 35, "176": 35, "208": [35, 52], "54": [35, 48, 52], "nan": [35, 38, 42, 44, 52], "ax": [35, 37, 38], "ddd": [35, 38], "to_parquet": 35, "how": [36, 37, 45], "There": 37, "rel": [37, 52], "task": [37, 53], "possibl": [37, 48, 52, 53], "composit": 37, "read_fil": 37, "geojson": [37, 52], "explod": 37, "reset_index": 37, "fit": 37, "luo": 37, "desir": 37, "try": [37, 38, 52], "mse": 37, "best_x": 37, "best_valu": 37, "closer": 37, "wa": [37, 53], "dure": 37, "vari": 37, "999": 37, "100_000": 37, "004": 37, "20255": 37, "100000": 37, "08": [37, 38, 48], "88it": 37, "flow": 37, "see": [37, 52], "matplotlib": 37, "pyplot": 37, "plt": 37, "line2d": 37, "0x7f4a015973a0": 37, "As": [37, 52], "successfulli": 37, "kind": [37, 38], "close": 37, "could": 37, "adjust": 37, "001998457049778621": 37, "39": [37, 38, 41, 42, 48, 52], "26136152081823005": 37, "2084201382217867": 37, "19428657048692446": 37, "055519879096642556": 37, "06251407231282412": 37, "10371699128343877": 37, "11418082778015352": 37, "let": [37, 52], "proport": 37, "lu": [37, 41], "item": [37, 38, 41], "stack": 37, "mostli": 37, "peripheri": 37, "speed": 37, "adjacency_graph": 37, "to_epsg": 37, "loc": 37, "point_u": 37, "point_v": 37, "line_str": 37, "annealing_optim": [37, 41], "lu_fsi": [37, 41], "lu_gsi": [37, 41], "b_id": [37, 41], "len": [37, 41], "def": 37, "append": 37, "ao": [37, 41, 52], "431": 37, "599": 37, "73it": 37, "0x7f49fbf4ee90": 37, "3019165135206091": 37, "kindergarten": [37, 41, 52], "1721170395869191": 37, "hospit": [37, 41, 52], "polyclin": [37, 41, 52], "5546623794212219": 37, "23357664233576642": 37, "swimming_pool": [37, 38, 41, 52], "7822685788787483": 37, "stadium": [37, 38, 41, 52], "theatr": [37, 38, 41, 52], "museum": [37, 38, 41, 52], "cinema": [37, 38, 41], "mall": [37, 41], "conveni": [37, 41], "03501196242049367": 37, "supermarket": [37, 41], "011672970070504739": 37, "cemeteri": [37, 41], "religion": [37, 41], "market": [37, 41], "35456336178594877": 37, "bowling_allei": [37, 38, 41], "8038585209003215": 37, "22448979591836735": 37, "pharmaci": [37, 41], "17445917655268667": 37, "fuel": [37, 38, 41], "03177629488401652": 37, "beach": [37, 38, 41], "1639881928501148": 37, "train_build": [37, 38, 41], "bank": [37, 41], "5238344683080147": 37, "lawyer": [37, 41], "cafe": [37, 41], "20553691275167785": 37, "subway_entr": [37, 38, 41], "9333916939159093": 37, "multifunctional_cent": [37, 38, 41], "014418496871701126": 37, "hairdress": [37, 41], "2502606882168926": 37, "restaur": [37, 41], "16853932584269662": 37, "bar": [37, 41], "13003355704697986": 37, "govern": [37, 41], "recruit": [37, 41], "6420097697138869": 37, "hotel": [37, 38, 41], "zoo": [37, 41], "circu": [37, 38, 41], "post": [37, 38, 41], "004503997297601621": 37, "polic": [37, 38, 41], "7676348547717843": 37, "dog_park": [37, 38, 41], "2627722772277228": 37, "hostel": [37, 38, 41], "6952491309385863": 37, "bakeri": [37, 41], "651890482398957": 37, "0013895450629463914": 37, "guest_hous": [37, 38, 41], "05213764337851929": 37, "reserv": [37, 38, 41], "sanatorium": [37, 38, 41], "embank": [37, 38, 41], "machin": [37, 41, 53], "building_pl": [37, 41], "breweri": [37, 41], "6016597510373444": 37, "woodworking_pl": [37, 41], "oil_refineri": [37, 41], "plant_of_building_materi": [37, 41], "20855057351407716": 37, "wastewater_pl": [37, 38, 41], "02247925777577962": 37, "water_work": [37, 38, 41], "substat": [37, 38, 41], "010144642974016625": 37, "train_stat": [37, 38, 41], "1361969617600838": 37, "bus_stat": [37, 38, 41, 52], "08192129953787985": 37, "bus_stop": [37, 38, 41, 52], "005238344683080147": 37, "pier": [37, 38, 41, 52], "3112033195020747": 37, "animal_shelt": [37, 41, 52], "military_kom": [37, 41, 52], "9803921568627451": 37, "prison": [37, 41, 52], "landfil": [37, 41, 52], "plant_nurseri": [37, 41, 52], "greenhouse_complex": [37, 41, 52], "warehous": [37, 41, 52], "approxim": 37, "1300": [37, 41], "1259": 37, "320": [37, 52], "200": [37, 38, 52], "1271": 37, "1283": 37, "4000": [37, 38, 41, 52], "1317": 37, "35000": 37, "70": [37, 53], "8737": 37, "82": [37, 38, 41], "85": 37, "8769": 37, "21000": 37, "8792": 37, "800": [37, 41], "8819": 37, "8934": 37, "3100": 37, "218": 37, "example_data_path": 38, "your": 38, "read_pickl": 38, "print": [38, 41, 52], "66": [38, 52], "platform": 38, "renam": 38, "population_balanc": 38, "building_area": 38, "fillna": 38, "lambda": [38, 52], "storeys_count": 38, "els": [38, 52], "bad_build": 38, "1237": [38, 52], "257": 38, "1241": [38, 52], "054": 38, "warn": [38, 52], "1253": [38, 52], "1721": 38, "6109": 38, "313": [38, 52], "11it": 38, "edgecolor": 38, "14": [38, 41, 48, 50, 52], "services_gdf": 38, "f": 38, "except": 38, "continu": 38, "c": 38, "don": [38, 52], "later": 38, "346460": 38, "223": 38, "6649125": 38, "497": 38, "346465": 38, "461": 38, "6649128": 38, "462": 38, "664912": 38, "mixed_us": 38, "0x7f12698ac670": 38, "32": [38, 48, 52], "isinst": 38, "round": [38, 41], "324": 38, "353918": 38, "105": 38, "662542": 38, "1173": 38, "352": 38, "363005": 38, "1163": 38, "308": 38, "capacity_fuel": 38, "501": 38, "available_service_typ": 38, "st": [38, 41], "34": [38, 41, 48, 52], "120": [38, 52], "3200": [38, 52], "300": [38, 41, 52], "600": [38, 52], "8200": [38, 52], "1100": [38, 52], "13000": [38, 52], "2200": [38, 52], "3600": [38, 52], "7100": [38, 52], "35": [38, 52], "internet_caf": 38, "43840": 38, "686518": 38, "641057": 38, "30688": 38, "480678": 38, "199357": 38, "13152": 38, "205840": 38, "942581": 38, "044667e": 38, "606": 38, "13953": 38, "390266": 38, "054497": [38, 49], "017345": 38, "141938": [38, 49], "031500": 38, "700000": [38, 49], "10294": 38, "395525": 38, "114392": 38, "2177": 38, "690063": 38, "431105": 38, "8116": 38, "705462": 38, "606820": 38, "317313e": 38, "5051": 38, "410558": 38, "444238": [38, 49], "217986": 38, "037925": [38, 49], "760348": 38, "211541": [38, 49], "871643": 38, "693582": 38, "710142": 38, "706252": 38, "161501": 38, "302679": 38, "630058e": 38, "480697": 38, "003234": [38, 49], "003205": 38, "008931": [38, 49], "246934": 38, "46303": 38, "954706": 38, "660044": 38, "30595": 38, "485797": 38, "760046": 38, "15708": 38, "468909": 38, "417075": 38, "964145e": 38, "581": 38, "11085": 38, "135352": 38, "235746": [38, 49], "056437": 38, "177121": [38, 49], "002452": 38, "660753": [38, 49], "153749": 38, "574111": 38, "097680": 38, "106407": 38, "750936": 38, "352959": 38, "47341": 38, "823175": 38, "046854": 38, "781752e": 38, "2004": 38, "45222": 38, "959595": 38, "086291": [38, 49], "025381": 38, "399812": [38, 49], "294526": 38, "692085": [38, 49], "buildings_gdf": 38, "158414": 38, "354964": 38, "060": 38, "6625185": 38, "771": 38, "354959": 38, "684": 38, "030958": 38, "035234": 38, "524664": 38, "510571": 38, "150194": 38, "355008": 38, "167": 38, "6625301": 38, "355012": 38, "344": 38, "185639": 38, "191954": 38, "534368": 38, "657586": 38, "58769": 38, "354878": 38, "6625544": 38, "327": 38, "354882": 38, "264070": 38, "272943": 38, "891060": 38, "381884": 38, "158321": 38, "355037": 38, "286": 38, "6624978": 38, "295": 38, "355060": 38, "347": 38, "158": 38, "324760": 38, "369888": 38, "110": [38, 52], "858925": 38, "47": [38, 41, 52], "510963": 38, "36319": 38, "354643": 38, "688": 38, "6625735": 38, "942": 38, "354657": 38, "709820": 38, "764221": 38, "134": 38, "934952": 38, "57": [38, 40, 48, 52], "829269": 38, "353603": 38, "237": [38, 52], "6625736": 38, "175": 38, "77507": 38, "80": [38, 42, 52], "355093": 38, "541": 38, "6624021": 38, "861": 38, "75": [38, 52], "8000": [38, 41], "355171": 38, "604": 38, "6624273": 38, "791": 38, "158369": 38, "261": 38, "353025": 38, "189": 38, "6622629": 38, "138": 38, "165": 38, "353416": 38, "159": 38, "6622235": 38, "pipelin": [39, 53], "layer": [39, 53], "spacematrix": [39, 45, 53], "case": [39, 53], "accessibility_to": [40, 52], "accessibility_from": [40, 52], "59": [40, 52], "61": [40, 42], "consum": [41, 46], "nearest_block": [41, 46], "sjoin_nearest": [41, 46], "1445": [41, 46], "distance_col": [41, 46], "choic": [41, 52], "10_000": [41, 48], "1065": 41, "46": [41, 52], "40it": 41, "46475854673870937": 41, "68": 41, "88": 41, "45": [41, 48, 52], "03": [41, 52], "65": [41, 52], "26": [41, 52], "1400": [41, 52], "150": [41, 52], "4750": 41, "190": 41, "6000": 41, "96": 41, "1472": 41, "352493": 41, "392": 41, "6644174": 41, "577": 41, "352480": 41, "316": 41, "352846": 41, "893": 41, "6643739": 41, "658": 41, "352854": 41, "917": [41, 52], "352713": 41, "398": 41, "6643353": 41, "609": 41, "352656": 41, "42": [41, 52], "352661": 41, "968": 41, "6643879": 41, "720": 41, "352637": 41, "303": 41, "43": [41, 52], "353921": 41, "529": [41, 52], "6644728": 41, "862": 41, "353829": 41, "106": 41, "64": 42, "000003": 42, "036894": 42, "63": [42, 52], "000010": 42, "693147": [42, 44], "211642": 42, "000001": 42, "212659": 42, "population_centr": 42, "93": 43, "analyt": 45, "demonstr": 46, "mask": 46, "3000": 46, "663": 47, "45it": 47, "725": 47, "2025": 48, "219": 48, "321": [48, 52], "4591x565": 48, "532": 48, "355": 48, "224": 48, "359": [48, 52], "restor": [48, 52], "738": 48, "2839x67": 48, "689": 48, "907": 48, "2540x10": 48, "171": 48, "211": 48, "266": 48, "success": [48, 52], "272": 48, "finish": [48, 52], "5519": 48, "from_dict": [48, 52], "upd_result": 48, "966": 48, "348": 48, "514": 48, "2854x67": 48, "273": 48, "383": 48, "605": 48, "2548x10": 48, "866": 48, "908": 48, "967": [48, 52], "delta_result": 48, "vmin": 48, "cmap": [48, 52], "puor": 48, "1186": 48, "2_000": 48, "2000": 48, "319": 48, "819": 48, "2838x67": 48, "003": [48, 52], "322": 48, "2539x10": 48, "586": 48, "626": 48, "683": 48, "understand": 48, "4047230817176672": 48, "6416307100358951": 48, "3889247430791169": 48, "6996023258100998": 48, "strelka_morphotyp": 49, "spacematrix_clust": 49, "spacematrix_morphotyp": 49, "\u0434\u0440\u0443\u0433\u043e\u0435": 49, "\u043c\u0430\u043b\u043e\u044d\u0442\u0430\u0436\u043d\u044b\u0439": 49, "\u043d\u0438\u0437\u043a\u043e\u043f\u043b\u043e\u0442\u043d\u044b\u0439": 49, "\u0436\u0438\u043b\u043e\u0439": 49, "\u043c\u0430\u043b\u043e\u044d\u0442\u0430\u0436\u043d\u0430\u044f": 49, "\u043c\u043e\u0434\u0435\u043b\u044c": 49, "\u0437\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438": 49, "\u0441\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0439": 49, "\u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u0430\u044f": 49, "\u0436\u0438\u043b\u0430\u044f": 49, "\u0437\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430": 49, "\u0441\u0440\u0435\u0434\u043d\u0435\u044d\u0442\u0430\u0436\u043d\u0430\u044f": 49, "\u0441\u0440\u0435\u0434\u043d\u0435\u044d\u0442\u0430\u0436\u043d\u044b\u0439": 49, "12": [49, 52], "va": 50, "3506": 50, "No": 50, "server": 50, "respons": 50, "log": 50, "queri": 50, "2452": 50, "userwarn": 50, "keep_geom_typ": 50, "136": 50, "df1": 50, "retain": 50, "mrr_area": 50, "area_to_length": 50, "area_to_mrr_area": 50, "345743": 50, "868": 50, "6648301": 50, "559": 50, "925": 50, "921": 50, "892872": 50, "998": 50, "893658": 50, "157": 50, "558109": 50, "851129": 50, "922914": 50, "345905": 50, "852": [50, 52], "6647864": 50, "377": [50, 52], "952": 50, "840": 50, "567641": 50, "1350": [50, 52], "491811": 50, "205": 50, "377513": 50, "092793": 50, "622416": 50, "explor": 50, "notebook": 50, "trust": 50, "weighted_connect": 51, "polina": 51, "desktop": 51, "house_to_servic": 51, "outer": 51, "service_count": 51, "mx": 51, "service_to_hous": 51, "221452": 51, "670383": 51, "534715": 51, "962766": 51, "360120": 51, "format": 52, "32637": 52, "read": 52, "One": 52, "themselv": 52, "descript": 52, "reproject": 52, "Then": 52, "880": 52, "922": 52, "931": 52, "939": 52, "988": 52, "166": 52, "231": 52, "371": 52, "550762": 52, "290": 52, "6565038": 52, "844": 52, "550768": 52, "857": 52, "6565033": 52, "563": 52, "544937": 52, "479": 52, "6564706": 52, "592": 52, "544935": 52, "619": 52, "544806": 52, "647": 52, "6565359": 52, "291": 52, "544814": 52, "358": 52, "544793": 52, "346": 52, "6565395": 52, "544800": 52, "732": 52, "550330": 52, "064": 52, "6563176": 52, "550349": 52, "733": 52, "546106": 52, "838": 52, "6566506": 52, "429": 52, "546183": 52, "774": 52, "734": 52, "552977": 52, "299": 52, "6562202": 52, "373": 52, "553051": 52, "882": 52, "735": 52, "556605": 52, "6559581": 52, "667": 52, "555984": 52, "050": 52, "736": 52, "552990": 52, "6562231": 52, "172": 52, "552917": 52, "365": 52, "737": 52, "to_fil": 52, "At": 52, "stage": 52, "intermodal_graph": 52, "vizual": 52, "ox": 52, "graph_to_gdf": 52, "graph_nod": 52, "length_met": 52, "graph_edg": 52, "now": 52, "acquir": 52, "shortest": 52, "pair": 52, "output": 52, "cell": 52, "j": 52, "doesn": 52, "traffic": 52, "727": 52, "728": 52, "729": 52, "730": 52, "731": 52, "195312": 52, "90625": 52, "453125": 52, "15625": 52, "437500": 52, "218750": 52, "328125": 52, "171875": 52, "398438": 52, "71875": 52, "43750": 52, "68750": 52, "609375": 52, "675781": 52, "53125": 52, "406250": 52, "78125": 52, "093750": 52, "843750": 52, "750000": 52, "62500": 52, "515625": 52, "007812": 52, "56250": 52, "96875": 52, "09375": 52, "500000": 52, "156250": 52, "12500": 52, "812500": 52, "62": 52, "46875": 52, "93750": 52, "875000": 52, "687500": 52, "187500": 52, "324219": 52, "902344": 52, "359375": 52, "242188": 52, "34375": 52, "031250": 52, "03125": 52, "72": 52, "375000": 52, "579102": 52, "736328": 52, "035156": 52, "921875": 52, "531250": 52, "31250": 52, "67": 52, "37500": 52, "vologda": 52, "With": 52, "howev": 52, "551734": 52, "6561005": 52, "520": 52, "551753": 52, "023": 52, "3051": 52, "403190": 52, "6102": 52, "806380": 52, "551242": 52, "888": 52, "6561217": 52, "885": 52, "551255": 52, "024": 52, "947": 52, "828484": 52, "551677": 52, "6560979": 52, "551735": 52, "071": 52, "643": 52, "583783": 52, "3217": 52, "918916": 52, "2574": 52, "335133": 52, "117": 52, "551600": 52, "420": 52, "6561013": 52, "594": 52, "551657": 52, "042": 52, "682": 52, "649464": 52, "550484": 52, "802": 52, "6569857": 52, "550472": 52, "896": 52, "230": 52, "815777": 52, "872": 52, "410": 52, "471": 52, "148": 52, "27it": 52, "9781": 52, "551681": 52, "6564001": 52, "551661": 52, "504": 52, "758281": 52, "16467": 52, "551668": 52, "426": 52, "6563984": 52, "551678": 52, "463": 52, "814782": 52, "In": 52, "But": 52, "lu_block": 52, "16it": 52, "few": 52, "acc": 52, "acc_r": 52, "18750": 52, "87500": 52, "potenti": 52, "suppli": 52, "acc_res_st": 52, "491": 52, "557733": 52, "822": 52, "6566501": 52, "805": 52, "557716": 52, "673": 52, "557929": 52, "513": 52, "6566532": 52, "311": 52, "557868": 52, "701": 52, "039062": 52, "674": 52, "557988": 52, "145": 52, "6566536": 52, "con": 52, "con_r": 52, "visualiz": 52, "norm": [52, 53], "prov": 52, "prov_r": 52, "670": 52, "192x37": 52, "780": 52, "835": 52, "937": 52, "52x18": 52, "022": 52, "26x4": 52, "028": 52, "039": 52, "053": 52, "269": 52, "provision_grav": 52, "prov_res_gr": 52, "785": 52, "8027122468957005": 52, "wide": 52, "5132829977628636": 52, "provision_greedi": 52, "again": 52, "increas": [52, 53], "prov_res_aft": 52, "556": 52, "193x37": 52, "662": 52, "820": 52, "53x18": 52, "853": 52, "876": 52, "910": 52, "27x4": 52, "929": 52, "946": 52, "modif": 52, "provision_upd": 52, "select": 52, "concept": 52, "specifii": 52, "050029e": 52, "423072e": 52, "541366": 52, "098806": 52, "056246": 52, "94819": 52, "799728": 52, "221511": 52, "446546": 52, "299077": 52, "043187": 52, "013304e": 52, "4299": 52, "428059": 52, "648861": 52, "107986": 52, "085385": 52, "264698": 52, "469765": 52, "175149": 52, "3599": 52, "332605": 52, "706084e": 52, "021097": 52, "400012": 52, "3204": 52, "576494": 52, "019534e": 52, "079725": 52, "543104": 52, "815": 52, "550": 52, "20it": 52, "didn": 52, "8472210572229025": 52, "7675453047775948": 52, "rdylgn": 52, "180": 52, "2585": 52, "590": 52, "2629": 52, "623": 52, "2630": 52, "2637": 52, "2661": 52, "660": 52, "201": 52, "clear_df": 52, "640": 52, "5665": 52, "1160": 52, "1482": 52, "587": 52, "3934": 52, "prov_ann": 52, "002": 52, "203x104": 52, "400": 52, "567": 52, "26x51": 52, "602": 52, "624": 52, "652": 52, "2x42": 52, "657": 52, "666": 52, "675": 52, "680": 52, "regulatori": 53, "util": 53, "contact": 53, "public": 53, "divis": 53, "smallest": 53, "analysi": 53, "further": 53, "aggreg": 53, "hierarchi": 53, "regard": 53, "attitud": 53, "extern": 53, "identif": 53, "context": 53, "built": 53, "scale": 53, "competit": 53, "resid": 53, "pretti": 53, "box": 53, "student": 53, "balanc": 53, "friendli": 53, "programm": 53, "respect": 53, "contributor": 53, "622280": 53, "learn": 53, "financi": 53, "foundat": 53, "roadmap": 53, "high": 53, "tech": 53, "artifici": 53, "intellig": 53, "period": 53, "2030": 53, "agreement": 53, "2021": 53, "00187": 53}, "objects": {"blocksnet": [[1, 0, 0, "-", "method"], [15, 0, 0, "-", "models"], [20, 0, 0, "-", "preprocessing"], [26, 0, 0, "-", "utils"]], "blocksnet.method": [[2, 0, 0, "-", "accessibility"], [3, 0, 0, "-", "annealing_optimizer"], [4, 0, 0, "-", "base_method"], [5, 0, 0, "-", "centrality"], [6, 0, 0, "-", "connectivity"], [7, 0, 0, "-", "diversity"], [8, 0, 0, "-", "integration"], [9, 0, 0, "-", "land_use_prediction"], [10, 0, 0, "-", "population_centrality"], [11, 0, 0, "-", "provision"], [12, 0, 0, "-", "spacematrix"], [13, 0, 0, "-", "vacant_area"], [14, 0, 0, "-", "weighted_connectivity"]], "blocksnet.method.accessibility": [[2, 1, 1, "", "Accessibility"]], "blocksnet.method.accessibility.Accessibility": [[2, 2, 1, "id1", "calculate"], [2, 2, 1, "id0", "plot"]], "blocksnet.method.annealing_optimizer": [[3, 1, 1, "", "AnnealingOptimizer"], [3, 1, 1, "", "Indicator"], [3, 1, 1, "", "Variable"]], "blocksnet.method.annealing_optimizer.AnnealingOptimizer": [[3, 2, 1, "", "_check_constraints"], [3, 2, 1, "", "_generate_indicators"], [3, 2, 1, "", "_generate_initial_X"], [3, 2, 1, "", "_get_clear_df"], [3, 2, 1, "", "_perturb"], [3, 2, 1, "", "calculate"], [3, 3, 1, "", "on_iteration"], [3, 2, 1, "", "to_bricks_df"], [3, 2, 1, "", "to_df"], [3, 2, 1, "", "to_gdf"]], "blocksnet.method.annealing_optimizer.Indicator": [[3, 4, 1, "", "build_floor_area"], [3, 4, 1, "", "footprint_area"], [3, 4, 1, "", "integrated_area"], [3, 4, 1, "", "living_area"], [3, 4, 1, "", "non_integrated_area"], [3, 4, 1, "", "population"], [3, 4, 1, "", "site_area"], [3, 2, 1, "", "to_dict"]], "blocksnet.method.annealing_optimizer.Variable": [[3, 4, 1, "", "area"], [3, 4, 1, "", "capacity"], [3, 2, 1, "", "to_dict"]], "blocksnet.method.base_method": [[4, 1, 1, "", "BaseMethod"]], "blocksnet.method.base_method.BaseMethod": [[4, 2, 1, "id0", "calculate"], [4, 3, 1, "", "city_model"], [4, 2, 1, "id1", "plot"], [4, 3, 1, "", "verbose"]], "blocksnet.method.centrality": [[5, 1, 1, "", "Centrality"]], "blocksnet.method.centrality.Centrality": [[5, 2, 1, "id1", "calculate"], [5, 4, 1, "", "connectivity"], [5, 4, 1, "", "diversity"], [5, 2, 1, "id0", "plot"]], "blocksnet.method.connectivity": [[6, 1, 1, "", "Connectivity"]], "blocksnet.method.connectivity.Connectivity": [[6, 2, 1, "id1", "calculate"], [6, 2, 1, "id0", "plot"]], "blocksnet.method.diversity": [[7, 1, 1, "", "Diversity"]], "blocksnet.method.diversity.Diversity": [[7, 2, 1, "", "_shannon_index"], [7, 2, 1, "id1", "calculate"], [7, 2, 1, "id0", "plot"]], "blocksnet.method.integration": [[8, 1, 1, "", "Integration"], [8, 1, 1, "", "IntegrationType"], [8, 1, 1, "", "WeightType"]], "blocksnet.method.integration.Integration": [[8, 2, 1, "", "_get_dual_graph"], [8, 4, 1, "", "blocks"], [8, 2, 1, "", "calculate"], [8, 2, 1, "", "clusterize"], [8, 4, 1, "", "edges"], [8, 3, 1, "", "graph"], [8, 2, 1, "", "plot"], [8, 2, 1, "", "validate_graph"], [8, 2, 1, "", "validate_model"]], "blocksnet.method.integration.IntegrationType": [[8, 3, 1, "", "GLOBAL"], [8, 3, 1, "", "LOCAL"]], "blocksnet.method.integration.WeightType": [[8, 3, 1, "", "ANGULAR"], [8, 3, 1, "", "LENGTH"]], "blocksnet.method.land_use_prediction": [[9, 1, 1, "", "LandUsePrediction"]], "blocksnet.method.land_use_prediction.LandUsePrediction": [[9, 2, 1, "", "_get_blocks_gdf"], [9, 2, 1, "", "_get_land_uses_services"], [9, 2, 1, "", "_get_unique_per_landuse"], [9, 2, 1, "", "_intersects"], [9, 2, 1, "", "_predict_block_landuse"], [9, 2, 1, "", "_predict_block_landuse_cosine_similarity"], [9, 2, 1, "", "calculate"], [9, 2, 1, "", "plot"]], "blocksnet.method.population_centrality": [[10, 1, 1, "", "PopulationCentrality"]], "blocksnet.method.population_centrality.PopulationCentrality": [[10, 2, 1, "id1", "calculate"], [10, 2, 1, "id0", "plot"]], "blocksnet.method.provision": [[11, 1, 1, "", "Provision"], [11, 1, 1, "", "ProvisionMethod"]], "blocksnet.method.provision.Provision": [[11, 2, 1, "", "_get_blocks_gdf"], [11, 2, 1, "", "_get_lower_bound"], [11, 2, 1, "", "_get_upper_bound"], [11, 2, 1, "", "_greedy_provision"], [11, 2, 1, "", "_lp_provision"], [11, 2, 1, "id4", "calculate"], [11, 2, 1, "id3", "get_bounds"], [11, 3, 1, "", "max_depth"], [11, 2, 1, "id0", "plot"], [11, 2, 1, "id1", "stat"], [11, 2, 1, "id2", "total"]], "blocksnet.method.provision.ProvisionMethod": [[11, 3, 1, "", "GRAVITATIONAL"], [11, 3, 1, "", "GREEDY"], [11, 3, 1, "", "LINEAR"]], "blocksnet.method.spacematrix": [[12, 1, 1, "", "Spacematrix"]], "blocksnet.method.spacematrix.Spacematrix": [[12, 2, 1, "", "_get_spacematrix_morphotypes"], [12, 2, 1, "", "_get_strelka_morphotypes"], [12, 2, 1, "", "_name_spacematrix_morphotypes"], [12, 2, 1, "id1", "calculate"], [12, 3, 1, "", "number_of_clusters"], [12, 2, 1, "id0", "plot"], [12, 3, 1, "", "random_state"]], "blocksnet.method.vacant_area": [[13, 1, 1, "", "VacantArea"]], "blocksnet.method.vacant_area.VacantArea": [[13, 2, 1, "", "_dwn_amenity"], [13, 2, 1, "", "_dwn_buildings"], [13, 2, 1, "", "_dwn_highway"], [13, 2, 1, "", "_dwn_landuse"], [13, 2, 1, "", "_dwn_leisure"], [13, 2, 1, "", "_dwn_natural"], [13, 2, 1, "", "_dwn_other"], [13, 2, 1, "", "_dwn_path"], [13, 2, 1, "", "_dwn_railway"], [13, 2, 1, "", "_dwn_waterway"], [13, 3, 1, "", "area_min"], [13, 3, 1, "", "area_to_length_min"], [13, 3, 1, "", "area_to_mrr_area_min"], [13, 3, 1, "", "blocks_buffer_max"], [13, 3, 1, "", "blocks_buffer_min"], [13, 3, 1, "", "buildings_buffer"], [13, 2, 1, "", "calculate"], [13, 3, 1, "", "path_buffer"], [13, 3, 1, "", "roads_buffer"]], "blocksnet.method.weighted_connectivity": [[14, 1, 1, "", "WeightedConnectivity"]], "blocksnet.method.weighted_connectivity.WeightedConnectivity": [[14, 2, 1, "id1", "calculate"], [14, 2, 1, "id0", "plot"]], "blocksnet.models": [[16, 0, 0, "-", "city"], [17, 0, 0, "-", "land_use"], [18, 0, 0, "-", "schema"], [19, 0, 0, "-", "service_type"]], "blocksnet.models.city": [[16, 1, 1, "", "Block"], [16, 1, 1, "", "BlockService"], [16, 1, 1, "", "Building"], [16, 1, 1, "", "BuildingService"], [16, 1, 1, "", "City"], [16, 1, 1, "", "Service"]], "blocksnet.models.city.Block": [[16, 2, 1, "", "_"], [16, 2, 1, "", "__getitem__"], [16, 2, 1, "", "__hash__"], [16, 4, 1, "", "all_services"], [16, 4, 1, "", "build_floor_area"], [16, 3, 1, "", "buildings"], [16, 4, 1, "", "buildings_indicators"], [16, 4, 1, "", "business_area"], [16, 3, 1, "", "city"], [16, 4, 1, "", "footprint_area"], [16, 2, 1, "", "from_gdf"], [16, 4, 1, "", "fsi"], [16, 3, 1, "", "geometry"], [16, 2, 1, "", "get_buildings_gdf"], [16, 2, 1, "", "get_services_gdf"], [16, 4, 1, "", "gsi"], [16, 3, 1, "", "id"], [16, 4, 1, "", "is_living"], [16, 4, 1, "", "l"], [16, 3, 1, "", "land_use"], [16, 4, 1, "", "land_use_service_types"], [16, 4, 1, "", "living_area"], [16, 4, 1, "", "living_demand"], [16, 4, 1, "", "mxi"], [16, 4, 1, "", "non_living_area"], [16, 4, 1, "", "osr"], [16, 4, 1, "", "population"], [16, 3, 1, "", "services"], [16, 4, 1, "", "services_indicators"], [16, 4, 1, "", "share_business"], [16, 4, 1, "", "share_living"], [16, 4, 1, "", "site_area"], [16, 4, 1, "", "territory_indicators"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "update_buildings"], [16, 2, 1, "", "update_services"], [16, 2, 1, "", "validate_land_use"]], "blocksnet.models.city.BlockService": [[16, 3, 1, "", "block"], [16, 3, 1, "", "geometry"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "validate_model"]], "blocksnet.models.city.Building": [[16, 3, 1, "", "block"], [16, 3, 1, "", "build_floor_area"], [16, 3, 1, "", "footprint_area"], [16, 3, 1, "", "geometry"], [16, 3, 1, "", "id"], [16, 4, 1, "", "is_living"], [16, 3, 1, "", "living_area"], [16, 3, 1, "", "non_living_area"], [16, 3, 1, "", "number_of_floors"], [16, 3, 1, "", "population"], [16, 3, 1, "", "services"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "update_services"], [16, 2, 1, "", "validate_model"]], "blocksnet.models.city.BuildingService": [[16, 2, 1, "", "attach_geometry"], [16, 3, 1, "", "building"], [16, 3, 1, "", "geometry"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "validate_model"]], "blocksnet.models.city.City": [[16, 2, 1, "", "_"], [16, 2, 1, "", "__str__"], [16, 2, 1, "id8", "add_service_type"], [16, 4, 1, "", "blocks"], [16, 4, 1, "", "buildings"], [16, 4, 1, "", "epsg"], [16, 2, 1, "", "from_pickle"], [16, 2, 1, "id4", "get_blocks_gdf"], [16, 2, 1, "id2", "get_buildings_gdf"], [16, 2, 1, "id9", "get_distance"], [16, 2, 1, "id11", "get_in_edges"], [16, 2, 1, "id1", "get_land_use_service_types"], [16, 2, 1, "id10", "get_out_edges"], [16, 2, 1, "id3", "get_services_gdf"], [16, 4, 1, "", "loaded_service_types"], [16, 2, 1, "id0", "plot"], [16, 4, 1, "", "service_types"], [16, 4, 1, "", "services"], [16, 2, 1, "", "to_pickle"], [16, 2, 1, "id6", "update_buildings"], [16, 2, 1, "id5", "update_land_use"], [16, 2, 1, "id7", "update_services"]], "blocksnet.models.city.Service": [[16, 2, 1, "", "_fill_capacity_and_area"], [16, 2, 1, "", "_get_min_brick"], [16, 3, 1, "", "area"], [16, 3, 1, "", "capacity"], [16, 3, 1, "", "is_integrated"], [16, 3, 1, "", "service_type"], [16, 2, 1, "", "to_dict"]], "blocksnet.models.land_use": [[17, 1, 1, "", "LandUse"]], "blocksnet.models.land_use.LandUse": [[17, 3, 1, "", "AGRICULTURE"], [17, 3, 1, "", "BUSINESS"], [17, 3, 1, "", "INDUSTRIAL"], [17, 3, 1, "", "RECREATION"], [17, 3, 1, "", "RESIDENTIAL"], [17, 3, 1, "", "SPECIAL"], [17, 3, 1, "", "TRANSPORT"]], "blocksnet.models.schema": [[18, 1, 1, "", "BaseSchema"]], "blocksnet.models.schema.BaseSchema": [[18, 1, 1, "", "Config"], [18, 2, 1, "", "check_geometry"], [18, 3, 1, "", "geometry"], [18, 3, 1, "", "idx"], [18, 2, 1, "", "to_gdf"]], "blocksnet.models.schema.BaseSchema.Config": [[18, 3, 1, "", "add_missing_columns"], [18, 3, 1, "", "name"], [18, 3, 1, "", "strict"]], "blocksnet.models.service_type": [[19, 1, 1, "", "ServiceBrick"], [19, 1, 1, "", "ServiceType"]], "blocksnet.models.service_type.ServiceBrick": [[19, 3, 1, "", "area"], [19, 3, 1, "", "capacity"], [19, 3, 1, "", "is_integrated"], [19, 3, 1, "", "parking_area"]], "blocksnet.models.service_type.ServiceType": [[19, 2, 1, "", "__hash__"], [19, 2, 1, "", "__str__"], [19, 3, 1, "", "accessibility"], [19, 3, 1, "", "bricks"], [19, 2, 1, "", "calculate_in_need"], [19, 3, 1, "", "code"], [19, 3, 1, "", "demand"], [19, 2, 1, "", "get_bricks"], [19, 3, 1, "", "land_use"], [19, 3, 1, "", "name"], [19, 2, 1, "", "to_dict"], [19, 2, 1, "", "validate_bricks"], [19, 2, 1, "", "validate_land_use"]], "blocksnet.preprocessing": [[21, 0, 0, "-", "accessibility_processor"], [22, 0, 0, "-", "blocks_generator"], [23, 0, 0, "-", "blocks_splitter"], [24, 0, 0, "-", "land_use_optimizer"], [25, 0, 0, "-", "land_use_processor"]], "blocksnet.preprocessing.accessibility_processor": [[21, 1, 1, "", "AccessibilityProcessor"], [21, 1, 1, "", "BlocksSchema"]], "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor": [[21, 2, 1, "", "_fix_graph"], [21, 2, 1, "", "_get_broken_nodes"], [21, 2, 1, "", "_get_island_nodes"], [21, 2, 1, "", "get_accessibility_matrix"], [21, 2, 1, "", "get_intermodal_graph"], [21, 2, 1, "", "plot"], [21, 4, 1, "", "polygon"]], "blocksnet.preprocessing.accessibility_processor.BlocksSchema": [[21, 1, 1, "", "Config"]], "blocksnet.preprocessing.accessibility_processor.BlocksSchema.Config": [[21, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator": [[22, 1, 1, "", "BlocksGenerator"], [22, 1, 1, "", "BlocksSchema"], [22, 1, 1, "", "BoundariesSchema"], [22, 1, 1, "", "RailwaysSchema"], [22, 1, 1, "", "RoadsSchema"], [22, 1, 1, "", "WaterSchema"]], "blocksnet.preprocessing.blocks_generator.BlocksGenerator": [[22, 2, 1, "", "_get_enclosures"], [22, 2, 1, "", "_reindex_blocks"], [22, 4, 1, "", "local_crs"], [22, 2, 1, "id0", "run"]], "blocksnet.preprocessing.blocks_generator.BlocksSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.BlocksSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.BoundariesSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.BoundariesSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.RailwaysSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.RailwaysSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.RoadsSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.RoadsSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_generator.WaterSchema": [[22, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_generator.WaterSchema.Config": [[22, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_splitter": [[23, 1, 1, "", "BlocksSchema"], [23, 1, 1, "", "BlocksSplitter"], [23, 1, 1, "", "BuildingsSchema"]], "blocksnet.preprocessing.blocks_splitter.BlocksSchema": [[23, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_splitter.BlocksSchema.Config": [[23, 3, 1, "", "name"]], "blocksnet.preprocessing.blocks_splitter.BlocksSplitter": [[23, 2, 1, "", "_drop_index_columns"], [23, 2, 1, "", "_split_block"], [23, 2, 1, "id0", "run"]], "blocksnet.preprocessing.blocks_splitter.BuildingsSchema": [[23, 1, 1, "", "Config"]], "blocksnet.preprocessing.blocks_splitter.BuildingsSchema.Config": [[23, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_optimizer": [[24, 1, 1, "", "BlocksSchema"], [24, 1, 1, "", "LandUseOptimizer"]], "blocksnet.preprocessing.land_use_optimizer.BlocksSchema": [[24, 1, 1, "", "Config"]], "blocksnet.preprocessing.land_use_optimizer.BlocksSchema.Config": [[24, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer": [[24, 2, 1, "", "_check_adj_rules"], [24, 2, 1, "", "_check_area_ranges"], [24, 2, 1, "", "_check_ratio_ranges"], [24, 2, 1, "", "_generate_initial_X"], [24, 2, 1, "", "_get_adjacency_graph"], [24, 2, 1, "", "_is_block_large"], [24, 2, 1, "", "_objective"], [24, 2, 1, "", "_perturb"], [24, 2, 1, "", "_split_large_blocks"], [24, 2, 1, "", "_split_polygon"], [24, 2, 1, "", "run"], [24, 2, 1, "", "to_gdf"], [24, 2, 1, "", "to_shares_dict"]], "blocksnet.preprocessing.land_use_processor": [[25, 1, 1, "", "BlocksSchema"], [25, 1, 1, "", "LandUseProcessor"], [25, 1, 1, "", "ProcessedBlocksSchema"], [25, 1, 1, "", "ZonesSchema"]], "blocksnet.preprocessing.land_use_processor.BlocksSchema": [[25, 1, 1, "", "Config"]], "blocksnet.preprocessing.land_use_processor.BlocksSchema.Config": [[25, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_processor.LandUseProcessor": [[25, 2, 1, "id0", "run"]], "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema": [[25, 1, 1, "", "Config"], [25, 3, 1, "", "land_use"], [25, 3, 1, "", "zone"]], "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.Config": [[25, 3, 1, "", "name"]], "blocksnet.preprocessing.land_use_processor.ZonesSchema": [[25, 1, 1, "", "Config"], [25, 3, 1, "", "zone"]], "blocksnet.preprocessing.land_use_processor.ZonesSchema.Config": [[25, 3, 1, "", "name"]], "blocksnet.utils": [[27, 0, 0, "-", "helpers"], [28, 0, 0, "-", "service_types"]], "blocksnet.utils.helpers": [[27, 5, 1, "", "drop_contained_geometries"], [27, 5, 1, "", "fill_holes"], [27, 5, 1, "", "filter_bottlenecks"], [27, 5, 1, "", "get_polygon_aspect_ratio"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"about": 0, "u": 0, "contact": 0, "public": 0, "blocksnet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 52, 53], "method": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 38, 41, 45, 46, 52], "access": [2, 34, 40, 52], "annealing_optim": 3, "base_method": 4, "central": [5, 42], "connect": [6, 42, 43, 51, 52], "divers": [7, 44], "integr": [8, 46], "land_use_predict": 9, "population_centr": 10, "provis": [11, 48, 52], "spacematrix": [12, 49], "vacant_area": 13, "weighted_connect": 14, "model": [15, 16, 17, 18, 19, 38, 52], "citi": [16, 34, 35, 38, 41, 46, 52], "land_us": 17, "schema": 18, "service_typ": [19, 28], "preprocess": [20, 21, 22, 23, 24, 25], "accessibility_processor": 21, "blocks_gener": 22, "blocks_splitt": 23, "land_use_optim": 24, "land_use_processor": 25, "util": [26, 27, 28, 48], "helper": 27, "api": 29, "document": [29, 30, 53], "contribut": 30, "how": [30, 33], "befor": 30, "submit": 30, "your": 30, "pull": 30, "request": 30, "after": 30, "acknowledg": [30, 53], "faq": 31, "what": 31, "i": 31, "quickstart": 33, "instal": [33, 52], "us": [33, 37], "gener": [34, 35, 52], "intermod": [34, 52], "graph": [34, 52], "calcul": [34, 52], "matrix": [34, 52], "read": 34, "block": [34, 35, 52], "initi": [34, 38, 52], "processor": 34, "instanc": 34, "an": [34, 52], "layer": [35, 38, 52], "blocksgener": 35, "blockssplitt": 35, "landuseprocessor": 35, "save": 35, "result": 35, "case": 36, "land": 37, "optim": [37, 41, 52], "servic": [37, 42, 52], "updat": [38, 48], "other": [38, 47], "wai": [38, 47], "oper": 38, "exampl": 39, "anneal": 41, "prepar": [41, 46], "base": 42, "popul": 42, "landus": 47, "predict": 47, "cosin": 47, "similar": 47, "around": 47, "scenario": 48, "neg": 48, "posit": 48, "some": 48, "vacant": 50, "area": 50, "weight": 51, "pipelin": 52, "0": 52, "1": 52, "2": 52, "3": 52, "4": 52, "5": 52, "urban": 52, "environ": 52, "analysi": 52, "composit": 52, "welcom": 53, "featur": 53}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "Contacts": [[0, "contacts"]], "Publications": [[0, "publications"]], "blocksnet.method": [[1, "module-blocksnet.method"]], "blocksnet.method.accessibility": [[2, "module-blocksnet.method.accessibility"]], "blocksnet.method.annealing_optimizer": [[3, "module-blocksnet.method.annealing_optimizer"]], "blocksnet.method.base_method": [[4, "module-blocksnet.method.base_method"]], "blocksnet.method.centrality": [[5, "module-blocksnet.method.centrality"]], "blocksnet.method.connectivity": [[6, "module-blocksnet.method.connectivity"]], "blocksnet.method.diversity": [[7, "module-blocksnet.method.diversity"]], "blocksnet.method.integration": [[8, "module-blocksnet.method.integration"]], "blocksnet.method.land_use_prediction": [[9, "module-blocksnet.method.land_use_prediction"]], "blocksnet.method.population_centrality": [[10, "module-blocksnet.method.population_centrality"]], "blocksnet.method.provision": [[11, "module-blocksnet.method.provision"]], "blocksnet.method.spacematrix": [[12, "module-blocksnet.method.spacematrix"]], "blocksnet.method.vacant_area": [[13, "module-blocksnet.method.vacant_area"]], "blocksnet.method.weighted_connectivity": [[14, "module-blocksnet.method.weighted_connectivity"]], "blocksnet.models": [[15, "module-blocksnet.models"]], "blocksnet.models.city": [[16, "module-blocksnet.models.city"]], "blocksnet.models.land_use": [[17, "module-blocksnet.models.land_use"]], "blocksnet.models.schema": [[18, "module-blocksnet.models.schema"]], "blocksnet.models.service_type": [[19, "module-blocksnet.models.service_type"]], "blocksnet.preprocessing": [[20, "module-blocksnet.preprocessing"]], "blocksnet.preprocessing.accessibility_processor": [[21, "module-blocksnet.preprocessing.accessibility_processor"]], "blocksnet.preprocessing.blocks_generator": [[22, "module-blocksnet.preprocessing.blocks_generator"]], "blocksnet.preprocessing.blocks_splitter": [[23, "module-blocksnet.preprocessing.blocks_splitter"]], "blocksnet.preprocessing.land_use_optimizer": [[24, "module-blocksnet.preprocessing.land_use_optimizer"]], "blocksnet.preprocessing.land_use_processor": [[25, "module-blocksnet.preprocessing.land_use_processor"]], "blocksnet.utils": [[26, "module-blocksnet.utils"]], "blocksnet.utils.helpers": [[27, "module-blocksnet.utils.helpers"]], "blocksnet.utils.service_types": [[28, "module-blocksnet.utils.service_types"]], "API documentation": [[29, "api-documentation"]], "Contributing": [[30, "contributing"]], "How to contribute": [[30, "how-to-contribute"]], "Before submitting your pull request": [[30, "before-submitting-your-pull-request"]], "Contribute to the documentation": [[30, "contribute-to-the-documentation"]], "After submitting your pull request": [[30, "after-submitting-your-pull-request"]], "Acknowledgements": [[30, "acknowledgements"], [53, "acknowledgements"]], "FAQ": [[31, "faq"]], "What is BlocksNet?": [[31, null]], "BlocksNet": [[32, "blocksnet"]], "Quickstart": [[33, "quickstart"]], "Installation": [[33, "installation"]], "How to use": [[33, "how-to-use"]], "Generating intermodal graph and calculating accessibility matrix": [[34, "Generating-intermodal-graph-and-calculating-accessibility-matrix"]], "Read blocks and initialize processor instance": [[34, "Read-blocks-and-initialize-processor-instance"]], "Generate an intermodal city graph": [[34, "Generate-an-intermodal-city-graph"]], "Calculate the accessibility matrix": [[34, "Calculate-the-accessibility-matrix"]], "City blocks layer generating": [[35, "City-blocks-layer-generating"]], "BlocksGenerator": [[35, "BlocksGenerator"]], "BlocksSplitter": [[35, "BlocksSplitter"]], "LandUseProcessor": [[35, "LandUseProcessor"]], "Saving the results": [[35, "Saving-the-results"]], "Cases": [[36, "cases"]], "Land Use Optimization": [[37, "Land-Use-Optimization"]], "Optimizing land uses": [[37, "Optimizing-land-uses"]], "Services optimizer": [[37, "Services-optimizer"]], "City initialization and methods": [[38, "City-initialization-and-methods"]], "Initialization": [[38, "Initialization"]], "Update layers": [[38, "Update-layers"]], "Methods and other ways to operate the City model": [[38, "Methods-and-other-ways-to-operate-the-City-model"]], "Examples": [[39, "examples"]], "Accessibility": [[40, "Accessibility"]], "Annealing optimizer": [[41, "Annealing-optimizer"]], "Prepare city": [[41, "Prepare-city"], [46, "Prepare-city"]], "Method": [[41, "Method"], [46, "Method"]], "Centrality": [[42, "Centrality"]], "Centrality based on connectivity and services": [[42, "Centrality-based-on-connectivity-and-services"]], "Centrality based on population": [[42, "Centrality-based-on-population"]], "Connectivity": [[43, "Connectivity"]], "Diversity": [[44, "Diversity"]], "Methods": [[45, "methods"]], "Integration": [[46, "Integration"]], "LandUse prediction": [[47, "LandUse-prediction"]], "Cosine similarity": [[47, "Cosine-similarity"]], "Other way around": [[47, "Other-way-around"]], "Provision": [[48, "Provision"]], "Update scenario (negative)": [[48, "Update-scenario-(negative)"]], "Update scenario (positive)": [[48, "Update-scenario-(positive)"]], "Some utilities": [[48, "Some-utilities"]], "Spacematrix": [[49, "Spacematrix"]], "Vacant Area": [[50, "Vacant-Area"]], "Weighted connectivity": [[51, "Weighted-connectivity"]], "Pipeline": [[52, "Pipeline"]], "0. BlocksNet Installation": [[52, "0.-BlocksNet-Installation"]], "1. Generating a layer of city blocks": [[52, "1.-Generating-a-layer-of-city-blocks"]], "2. Generating an intermodal graph": [[52, "2.-Generating-an-intermodal-graph"]], "3. Calculating an accessibility matrix": [[52, "3.-Calculating-an-accessibility-matrix"]], "4. City model initialization": [[52, "4.-City-model-initialization"]], "5. Methods for urban environment analysis": [[52, "5.-Methods-for-urban-environment-analysis"]], "5.1. Accessibility": [[52, "5.1.-Accessibility"]], "5.2. Connectivity": [[52, "5.2.-Connectivity"]], "5.3. Service Provision": [[52, "5.3.-Service-Provision"]], "5.4. Services composition optimization": [[52, "5.4.-Services-composition-optimization"]], "Welcome to BlocksNet documentation!": [[53, "welcome-to-blocksnet-documentation"]], "Documentation:": [[53, "documentation"]], "Features:": [[53, "features"]]}, "indexentries": {"blocksnet.method": [[1, "module-blocksnet.method"]], "module": [[1, "module-blocksnet.method"], [2, "module-blocksnet.method.accessibility"], [3, "module-blocksnet.method.annealing_optimizer"], [4, "module-blocksnet.method.base_method"], [5, "module-blocksnet.method.centrality"], [6, "module-blocksnet.method.connectivity"], [7, "module-blocksnet.method.diversity"], [8, "module-blocksnet.method.integration"], [9, "module-blocksnet.method.land_use_prediction"], [10, "module-blocksnet.method.population_centrality"], [11, "module-blocksnet.method.provision"], [12, "module-blocksnet.method.spacematrix"], [13, "module-blocksnet.method.vacant_area"], [14, "module-blocksnet.method.weighted_connectivity"], [15, "module-blocksnet.models"], [16, "module-blocksnet.models.city"], [17, "module-blocksnet.models.land_use"], [18, "module-blocksnet.models.schema"], [19, "module-blocksnet.models.service_type"], [20, "module-blocksnet.preprocessing"], [21, "module-blocksnet.preprocessing.accessibility_processor"], [22, "module-blocksnet.preprocessing.blocks_generator"], [23, "module-blocksnet.preprocessing.blocks_splitter"], [24, "module-blocksnet.preprocessing.land_use_optimizer"], [25, "module-blocksnet.preprocessing.land_use_processor"], [26, "module-blocksnet.utils"], [27, "module-blocksnet.utils.helpers"], [28, "module-blocksnet.utils.service_types"]], "accessibility (class in blocksnet.method.accessibility)": [[2, "blocksnet.method.accessibility.Accessibility"]], "blocksnet.method.accessibility": [[2, "module-blocksnet.method.accessibility"]], "calculate() (blocksnet.method.accessibility.accessibility method)": [[2, "blocksnet.method.accessibility.Accessibility.calculate"], [2, "id1"]], "plot() (blocksnet.method.accessibility.accessibility method)": [[2, "blocksnet.method.accessibility.Accessibility.plot"]], "plot() (blocksnet.method.accessibility.accessibility static method)": [[2, "id0"]], "annealingoptimizer (class in blocksnet.method.annealing_optimizer)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer"]], "indicator (class in blocksnet.method.annealing_optimizer)": [[3, "blocksnet.method.annealing_optimizer.Indicator"]], "variable (class in blocksnet.method.annealing_optimizer)": [[3, "blocksnet.method.annealing_optimizer.Variable"]], "_check_constraints() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._check_constraints"]], "_generate_indicators() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._generate_indicators"]], "_generate_initial_x() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._generate_initial_X"]], "_get_clear_df() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._get_clear_df"]], "_perturb() (blocksnet.method.annealing_optimizer.annealingoptimizer static method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer._perturb"]], "area (blocksnet.method.annealing_optimizer.variable property)": [[3, "blocksnet.method.annealing_optimizer.Variable.area"]], "blocksnet.method.annealing_optimizer": [[3, "module-blocksnet.method.annealing_optimizer"]], "build_floor_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.build_floor_area"]], "calculate() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.calculate"]], "capacity (blocksnet.method.annealing_optimizer.variable property)": [[3, "blocksnet.method.annealing_optimizer.Variable.capacity"]], "footprint_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.footprint_area"]], "integrated_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.integrated_area"]], "living_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.living_area"]], "non_integrated_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.non_integrated_area"]], "on_iteration (blocksnet.method.annealing_optimizer.annealingoptimizer attribute)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.on_iteration"]], "population (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.population"]], "site_area (blocksnet.method.annealing_optimizer.indicator property)": [[3, "blocksnet.method.annealing_optimizer.Indicator.site_area"]], "to_bricks_df() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.to_bricks_df"]], "to_df() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.to_df"]], "to_dict() (blocksnet.method.annealing_optimizer.indicator method)": [[3, "blocksnet.method.annealing_optimizer.Indicator.to_dict"]], "to_dict() (blocksnet.method.annealing_optimizer.variable method)": [[3, "blocksnet.method.annealing_optimizer.Variable.to_dict"]], "to_gdf() (blocksnet.method.annealing_optimizer.annealingoptimizer method)": [[3, "blocksnet.method.annealing_optimizer.AnnealingOptimizer.to_gdf"]], "basemethod (class in blocksnet.method.base_method)": [[4, "blocksnet.method.base_method.BaseMethod"]], "blocksnet.method.base_method": [[4, "module-blocksnet.method.base_method"]], "calculate() (blocksnet.method.base_method.basemethod method)": [[4, "blocksnet.method.base_method.BaseMethod.calculate"], [4, "id0"]], "city_model (blocksnet.method.base_method.basemethod attribute)": [[4, "blocksnet.method.base_method.BaseMethod.city_model"]], "plot() (blocksnet.method.base_method.basemethod method)": [[4, "blocksnet.method.base_method.BaseMethod.plot"], [4, "id1"]], "verbose (blocksnet.method.base_method.basemethod attribute)": [[4, "blocksnet.method.base_method.BaseMethod.verbose"]], "centrality (class in blocksnet.method.centrality)": [[5, "blocksnet.method.centrality.Centrality"]], "blocksnet.method.centrality": [[5, "module-blocksnet.method.centrality"]], "calculate() (blocksnet.method.centrality.centrality method)": [[5, "blocksnet.method.centrality.Centrality.calculate"], [5, "id1"]], "connectivity (blocksnet.method.centrality.centrality property)": [[5, "blocksnet.method.centrality.Centrality.connectivity"]], "diversity (blocksnet.method.centrality.centrality property)": [[5, "blocksnet.method.centrality.Centrality.diversity"]], "plot() (blocksnet.method.centrality.centrality method)": [[5, "blocksnet.method.centrality.Centrality.plot"]], "plot() (blocksnet.method.centrality.centrality static method)": [[5, "id0"]], "connectivity (class in blocksnet.method.connectivity)": [[6, "blocksnet.method.connectivity.Connectivity"]], "blocksnet.method.connectivity": [[6, "module-blocksnet.method.connectivity"]], "calculate() (blocksnet.method.connectivity.connectivity method)": [[6, "blocksnet.method.connectivity.Connectivity.calculate"], [6, "id1"]], "plot() (blocksnet.method.connectivity.connectivity method)": [[6, "blocksnet.method.connectivity.Connectivity.plot"]], "plot() (blocksnet.method.connectivity.connectivity static method)": [[6, "id0"]], "diversity (class in blocksnet.method.diversity)": [[7, "blocksnet.method.diversity.Diversity"]], "_shannon_index() (blocksnet.method.diversity.diversity static method)": [[7, "blocksnet.method.diversity.Diversity._shannon_index"]], "blocksnet.method.diversity": [[7, "module-blocksnet.method.diversity"]], "calculate() (blocksnet.method.diversity.diversity method)": [[7, "blocksnet.method.diversity.Diversity.calculate"], [7, "id1"]], "plot() (blocksnet.method.diversity.diversity method)": [[7, "blocksnet.method.diversity.Diversity.plot"]], "plot() (blocksnet.method.diversity.diversity static method)": [[7, "id0"]], "angular (blocksnet.method.integration.weighttype attribute)": [[8, "blocksnet.method.integration.WeightType.ANGULAR"]], "global (blocksnet.method.integration.integrationtype attribute)": [[8, "blocksnet.method.integration.IntegrationType.GLOBAL"]], "integration (class in blocksnet.method.integration)": [[8, "blocksnet.method.integration.Integration"]], "integrationtype (class in blocksnet.method.integration)": [[8, "blocksnet.method.integration.IntegrationType"]], "length (blocksnet.method.integration.weighttype attribute)": [[8, "blocksnet.method.integration.WeightType.LENGTH"]], "local (blocksnet.method.integration.integrationtype attribute)": [[8, "blocksnet.method.integration.IntegrationType.LOCAL"]], "weighttype (class in blocksnet.method.integration)": [[8, "blocksnet.method.integration.WeightType"]], "_get_dual_graph() (blocksnet.method.integration.integration method)": [[8, "blocksnet.method.integration.Integration._get_dual_graph"]], "blocks (blocksnet.method.integration.integration property)": [[8, "blocksnet.method.integration.Integration.blocks"]], "blocksnet.method.integration": [[8, "module-blocksnet.method.integration"]], "calculate() (blocksnet.method.integration.integration method)": [[8, "blocksnet.method.integration.Integration.calculate"]], "clusterize() (blocksnet.method.integration.integration method)": [[8, "blocksnet.method.integration.Integration.clusterize"]], "edges (blocksnet.method.integration.integration property)": [[8, "blocksnet.method.integration.Integration.edges"]], "graph (blocksnet.method.integration.integration attribute)": [[8, "blocksnet.method.integration.Integration.graph"]], "plot() (blocksnet.method.integration.integration static method)": [[8, "blocksnet.method.integration.Integration.plot"]], "validate_graph() (blocksnet.method.integration.integration static method)": [[8, "blocksnet.method.integration.Integration.validate_graph"]], "validate_model() (blocksnet.method.integration.integration static method)": [[8, "blocksnet.method.integration.Integration.validate_model"]], "landuseprediction (class in blocksnet.method.land_use_prediction)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction"]], "_get_blocks_gdf() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._get_blocks_gdf"]], "_get_land_uses_services() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._get_land_uses_services"]], "_get_unique_per_landuse() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._get_unique_per_landuse"]], "_intersects() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._intersects"]], "_predict_block_landuse() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._predict_block_landuse"]], "_predict_block_landuse_cosine_similarity() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction._predict_block_landuse_cosine_similarity"]], "blocksnet.method.land_use_prediction": [[9, "module-blocksnet.method.land_use_prediction"]], "calculate() (blocksnet.method.land_use_prediction.landuseprediction method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction.calculate"]], "plot() (blocksnet.method.land_use_prediction.landuseprediction static method)": [[9, "blocksnet.method.land_use_prediction.LandUsePrediction.plot"]], "populationcentrality (class in blocksnet.method.population_centrality)": [[10, "blocksnet.method.population_centrality.PopulationCentrality"]], "blocksnet.method.population_centrality": [[10, "module-blocksnet.method.population_centrality"]], "calculate() (blocksnet.method.population_centrality.populationcentrality method)": [[10, "blocksnet.method.population_centrality.PopulationCentrality.calculate"], [10, "id1"]], "plot() (blocksnet.method.population_centrality.populationcentrality method)": [[10, "blocksnet.method.population_centrality.PopulationCentrality.plot"]], "plot() (blocksnet.method.population_centrality.populationcentrality static method)": [[10, "id0"]], "gravitational (blocksnet.method.provision.provisionmethod attribute)": [[11, "blocksnet.method.provision.ProvisionMethod.GRAVITATIONAL"]], "greedy (blocksnet.method.provision.provisionmethod attribute)": [[11, "blocksnet.method.provision.ProvisionMethod.GREEDY"]], "linear (blocksnet.method.provision.provisionmethod attribute)": [[11, "blocksnet.method.provision.ProvisionMethod.LINEAR"]], "provision (class in blocksnet.method.provision)": [[11, "blocksnet.method.provision.Provision"]], "provisionmethod (class in blocksnet.method.provision)": [[11, "blocksnet.method.provision.ProvisionMethod"]], "_get_blocks_gdf() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision._get_blocks_gdf"]], "_get_lower_bound() (blocksnet.method.provision.provision static method)": [[11, "blocksnet.method.provision.Provision._get_lower_bound"]], "_get_upper_bound() (blocksnet.method.provision.provision static method)": [[11, "blocksnet.method.provision.Provision._get_upper_bound"]], "_greedy_provision() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision._greedy_provision"]], "_lp_provision() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision._lp_provision"]], "blocksnet.method.provision": [[11, "module-blocksnet.method.provision"]], "calculate() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.calculate"], [11, "id4"]], "get_bounds() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.get_bounds"], [11, "id3"]], "max_depth (blocksnet.method.provision.provision attribute)": [[11, "blocksnet.method.provision.Provision.max_depth"]], "plot() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.plot"], [11, "id0"]], "stat() (blocksnet.method.provision.provision class method)": [[11, "id1"]], "stat() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.stat"]], "total() (blocksnet.method.provision.provision class method)": [[11, "id2"]], "total() (blocksnet.method.provision.provision method)": [[11, "blocksnet.method.provision.Provision.total"]], "spacematrix (class in blocksnet.method.spacematrix)": [[12, "blocksnet.method.spacematrix.Spacematrix"]], "_get_spacematrix_morphotypes() (blocksnet.method.spacematrix.spacematrix method)": [[12, "blocksnet.method.spacematrix.Spacematrix._get_spacematrix_morphotypes"]], "_get_strelka_morphotypes() (blocksnet.method.spacematrix.spacematrix static method)": [[12, "blocksnet.method.spacematrix.Spacematrix._get_strelka_morphotypes"]], "_name_spacematrix_morphotypes() (blocksnet.method.spacematrix.spacematrix static method)": [[12, "blocksnet.method.spacematrix.Spacematrix._name_spacematrix_morphotypes"]], "blocksnet.method.spacematrix": [[12, "module-blocksnet.method.spacematrix"]], "calculate() (blocksnet.method.spacematrix.spacematrix method)": [[12, "blocksnet.method.spacematrix.Spacematrix.calculate"], [12, "id1"]], "number_of_clusters (blocksnet.method.spacematrix.spacematrix attribute)": [[12, "blocksnet.method.spacematrix.Spacematrix.number_of_clusters"]], "plot() (blocksnet.method.spacematrix.spacematrix method)": [[12, "blocksnet.method.spacematrix.Spacematrix.plot"]], "plot() (blocksnet.method.spacematrix.spacematrix static method)": [[12, "id0"]], "random_state (blocksnet.method.spacematrix.spacematrix attribute)": [[12, "blocksnet.method.spacematrix.Spacematrix.random_state"]], "vacantarea (class in blocksnet.method.vacant_area)": [[13, "blocksnet.method.vacant_area.VacantArea"]], "_dwn_amenity() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_amenity"]], "_dwn_buildings() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_buildings"]], "_dwn_highway() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_highway"]], "_dwn_landuse() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_landuse"]], "_dwn_leisure() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_leisure"]], "_dwn_natural() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_natural"]], "_dwn_other() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_other"]], "_dwn_path() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_path"]], "_dwn_railway() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_railway"]], "_dwn_waterway() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea._dwn_waterway"]], "area_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.area_min"]], "area_to_length_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.area_to_length_min"]], "area_to_mrr_area_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.area_to_mrr_area_min"]], "blocks_buffer_max (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.blocks_buffer_max"]], "blocks_buffer_min (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.blocks_buffer_min"]], "blocksnet.method.vacant_area": [[13, "module-blocksnet.method.vacant_area"]], "buildings_buffer (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.buildings_buffer"]], "calculate() (blocksnet.method.vacant_area.vacantarea method)": [[13, "blocksnet.method.vacant_area.VacantArea.calculate"]], "path_buffer (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.path_buffer"]], "roads_buffer (blocksnet.method.vacant_area.vacantarea attribute)": [[13, "blocksnet.method.vacant_area.VacantArea.roads_buffer"]], "weightedconnectivity (class in blocksnet.method.weighted_connectivity)": [[14, "blocksnet.method.weighted_connectivity.WeightedConnectivity"]], "blocksnet.method.weighted_connectivity": [[14, "module-blocksnet.method.weighted_connectivity"]], "calculate() (blocksnet.method.weighted_connectivity.weightedconnectivity method)": [[14, "blocksnet.method.weighted_connectivity.WeightedConnectivity.calculate"], [14, "id1"]], "plot() (blocksnet.method.weighted_connectivity.weightedconnectivity method)": [[14, "blocksnet.method.weighted_connectivity.WeightedConnectivity.plot"]], "plot() (blocksnet.method.weighted_connectivity.weightedconnectivity static method)": [[14, "id0"]], "blocksnet.models": [[15, "module-blocksnet.models"]], "block (class in blocksnet.models.city)": [[16, "blocksnet.models.city.Block"]], "blockservice (class in blocksnet.models.city)": [[16, "blocksnet.models.city.BlockService"]], "building (class in blocksnet.models.city)": [[16, "blocksnet.models.city.Building"]], "buildingservice (class in blocksnet.models.city)": [[16, "blocksnet.models.city.BuildingService"]], "city (class in blocksnet.models.city)": [[16, "blocksnet.models.city.City"]], "service (class in blocksnet.models.city)": [[16, "blocksnet.models.city.Service"]], "_() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block._"]], "_() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City._"]], "__getitem__() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.__getitem__"]], "__hash__() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.__hash__"]], "__str__() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.__str__"]], "_fill_capacity_and_area() (blocksnet.models.city.service class method)": [[16, "blocksnet.models.city.Service._fill_capacity_and_area"]], "_get_min_brick() (blocksnet.models.city.service class method)": [[16, "blocksnet.models.city.Service._get_min_brick"]], "add_service_type() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.add_service_type"], [16, "id8"]], "all_services (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.all_services"]], "area (blocksnet.models.city.service attribute)": [[16, "blocksnet.models.city.Service.area"]], "attach_geometry() (blocksnet.models.city.buildingservice class method)": [[16, "blocksnet.models.city.BuildingService.attach_geometry"]], "block (blocksnet.models.city.blockservice attribute)": [[16, "blocksnet.models.city.BlockService.block"]], "block (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.block"]], "blocks (blocksnet.models.city.city property)": [[16, "blocksnet.models.city.City.blocks"]], "blocksnet.models.city": [[16, "module-blocksnet.models.city"]], "build_floor_area (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.build_floor_area"]], "build_floor_area (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.build_floor_area"]], "building (blocksnet.models.city.buildingservice attribute)": [[16, "blocksnet.models.city.BuildingService.building"]], "buildings (blocksnet.models.city.block attribute)": [[16, "blocksnet.models.city.Block.buildings"]], "buildings (blocksnet.models.city.city property)": [[16, "blocksnet.models.city.City.buildings"]], "buildings_indicators (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.buildings_indicators"]], "business_area (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.business_area"]], "capacity (blocksnet.models.city.service attribute)": [[16, "blocksnet.models.city.Service.capacity"]], "city (blocksnet.models.city.block attribute)": [[16, "blocksnet.models.city.Block.city"]], "epsg (blocksnet.models.city.city property)": [[16, "blocksnet.models.city.City.epsg"]], "footprint_area (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.footprint_area"]], "footprint_area (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.footprint_area"]], "from_gdf() (blocksnet.models.city.block class method)": [[16, "blocksnet.models.city.Block.from_gdf"]], "from_pickle() (blocksnet.models.city.city static method)": [[16, "blocksnet.models.city.City.from_pickle"]], "fsi (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.fsi"]], "geometry (blocksnet.models.city.block attribute)": [[16, "blocksnet.models.city.Block.geometry"]], "geometry (blocksnet.models.city.blockservice attribute)": [[16, "blocksnet.models.city.BlockService.geometry"]], "geometry (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.geometry"]], "geometry (blocksnet.models.city.buildingservice attribute)": [[16, "blocksnet.models.city.BuildingService.geometry"]], "get_blocks_gdf() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_blocks_gdf"], [16, "id4"]], "get_buildings_gdf() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.get_buildings_gdf"]], "get_buildings_gdf() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_buildings_gdf"], [16, "id2"]], "get_distance() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_distance"], [16, "id9"]], "get_in_edges() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_in_edges"], [16, "id11"]], "get_land_use_service_types() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_land_use_service_types"], [16, "id1"]], "get_out_edges() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_out_edges"], [16, "id10"]], "get_services_gdf() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.get_services_gdf"]], "get_services_gdf() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.get_services_gdf"], [16, "id3"]], "gsi (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.gsi"]], "id (blocksnet.models.city.block attribute)": [[16, "blocksnet.models.city.Block.id"]], "id (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.id"]], "is_integrated (blocksnet.models.city.service attribute)": [[16, "blocksnet.models.city.Service.is_integrated"]], "is_living (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.is_living"]], "is_living (blocksnet.models.city.building property)": [[16, "blocksnet.models.city.Building.is_living"]], "l (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.l"]], "land_use (blocksnet.models.city.block attribute)": [[16, "blocksnet.models.city.Block.land_use"]], "land_use_service_types (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.land_use_service_types"]], "living_area (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.living_area"]], "living_area (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.living_area"]], "living_demand (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.living_demand"]], "loaded_service_types (blocksnet.models.city.city property)": [[16, "blocksnet.models.city.City.loaded_service_types"]], "mxi (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.mxi"]], "non_living_area (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.non_living_area"]], "non_living_area (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.non_living_area"]], "number_of_floors (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.number_of_floors"]], "osr (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.osr"]], "plot() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.plot"], [16, "id0"]], "population (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.population"]], "population (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.population"]], "service_type (blocksnet.models.city.service attribute)": [[16, "blocksnet.models.city.Service.service_type"]], "service_types (blocksnet.models.city.city property)": [[16, "blocksnet.models.city.City.service_types"]], "services (blocksnet.models.city.block attribute)": [[16, "blocksnet.models.city.Block.services"]], "services (blocksnet.models.city.building attribute)": [[16, "blocksnet.models.city.Building.services"]], "services (blocksnet.models.city.city property)": [[16, "blocksnet.models.city.City.services"]], "services_indicators (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.services_indicators"]], "share_business (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.share_business"]], "share_living (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.share_living"]], "site_area (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.site_area"]], "territory_indicators (blocksnet.models.city.block property)": [[16, "blocksnet.models.city.Block.territory_indicators"]], "to_dict() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.to_dict"]], "to_dict() (blocksnet.models.city.blockservice method)": [[16, "blocksnet.models.city.BlockService.to_dict"]], "to_dict() (blocksnet.models.city.building method)": [[16, "blocksnet.models.city.Building.to_dict"]], "to_dict() (blocksnet.models.city.buildingservice method)": [[16, "blocksnet.models.city.BuildingService.to_dict"]], "to_dict() (blocksnet.models.city.service method)": [[16, "blocksnet.models.city.Service.to_dict"]], "to_pickle() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.to_pickle"]], "update_buildings() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.update_buildings"]], "update_buildings() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.update_buildings"], [16, "id6"]], "update_land_use() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.update_land_use"], [16, "id5"]], "update_services() (blocksnet.models.city.block method)": [[16, "blocksnet.models.city.Block.update_services"]], "update_services() (blocksnet.models.city.building method)": [[16, "blocksnet.models.city.Building.update_services"]], "update_services() (blocksnet.models.city.city method)": [[16, "blocksnet.models.city.City.update_services"], [16, "id7"]], "validate_land_use() (blocksnet.models.city.block static method)": [[16, "blocksnet.models.city.Block.validate_land_use"]], "validate_model() (blocksnet.models.city.blockservice class method)": [[16, "blocksnet.models.city.BlockService.validate_model"]], "validate_model() (blocksnet.models.city.building class method)": [[16, "blocksnet.models.city.Building.validate_model"]], "validate_model() (blocksnet.models.city.buildingservice class method)": [[16, "blocksnet.models.city.BuildingService.validate_model"]], "agriculture (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.AGRICULTURE"]], "business (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.BUSINESS"]], "industrial (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.INDUSTRIAL"]], "landuse (class in blocksnet.models.land_use)": [[17, "blocksnet.models.land_use.LandUse"]], "recreation (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.RECREATION"]], "residential (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.RESIDENTIAL"]], "special (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.SPECIAL"]], "transport (blocksnet.models.land_use.landuse attribute)": [[17, "blocksnet.models.land_use.LandUse.TRANSPORT"]], "blocksnet.models.land_use": [[17, "module-blocksnet.models.land_use"]], "baseschema (class in blocksnet.models.schema)": [[18, "blocksnet.models.schema.BaseSchema"]], "baseschema.config (class in blocksnet.models.schema)": [[18, "blocksnet.models.schema.BaseSchema.Config"]], "add_missing_columns (blocksnet.models.schema.baseschema.config attribute)": [[18, "blocksnet.models.schema.BaseSchema.Config.add_missing_columns"]], "blocksnet.models.schema": [[18, "module-blocksnet.models.schema"]], "check_geometry() (blocksnet.models.schema.baseschema class method)": [[18, "blocksnet.models.schema.BaseSchema.check_geometry"]], "geometry (blocksnet.models.schema.baseschema attribute)": [[18, "blocksnet.models.schema.BaseSchema.geometry"]], "idx (blocksnet.models.schema.baseschema attribute)": [[18, "blocksnet.models.schema.BaseSchema.idx"]], "name (blocksnet.models.schema.baseschema.config attribute)": [[18, "blocksnet.models.schema.BaseSchema.Config.name"]], "strict (blocksnet.models.schema.baseschema.config attribute)": [[18, "blocksnet.models.schema.BaseSchema.Config.strict"]], "to_gdf() (blocksnet.models.schema.baseschema class method)": [[18, "blocksnet.models.schema.BaseSchema.to_gdf"]], "servicebrick (class in blocksnet.models.service_type)": [[19, "blocksnet.models.service_type.ServiceBrick"]], "servicetype (class in blocksnet.models.service_type)": [[19, "blocksnet.models.service_type.ServiceType"]], "__hash__() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.__hash__"]], "__str__() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.__str__"]], "accessibility (blocksnet.models.service_type.servicetype attribute)": [[19, "blocksnet.models.service_type.ServiceType.accessibility"]], "area (blocksnet.models.service_type.servicebrick attribute)": [[19, "blocksnet.models.service_type.ServiceBrick.area"]], "blocksnet.models.service_type": [[19, "module-blocksnet.models.service_type"]], "bricks (blocksnet.models.service_type.servicetype attribute)": [[19, "blocksnet.models.service_type.ServiceType.bricks"]], "calculate_in_need() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.calculate_in_need"]], "capacity (blocksnet.models.service_type.servicebrick attribute)": [[19, "blocksnet.models.service_type.ServiceBrick.capacity"]], "code (blocksnet.models.service_type.servicetype attribute)": [[19, "blocksnet.models.service_type.ServiceType.code"]], "demand (blocksnet.models.service_type.servicetype attribute)": [[19, "blocksnet.models.service_type.ServiceType.demand"]], "get_bricks() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.get_bricks"]], "is_integrated (blocksnet.models.service_type.servicebrick attribute)": [[19, "blocksnet.models.service_type.ServiceBrick.is_integrated"]], "land_use (blocksnet.models.service_type.servicetype attribute)": [[19, "blocksnet.models.service_type.ServiceType.land_use"]], "name (blocksnet.models.service_type.servicetype attribute)": [[19, "blocksnet.models.service_type.ServiceType.name"]], "parking_area (blocksnet.models.service_type.servicebrick attribute)": [[19, "blocksnet.models.service_type.ServiceBrick.parking_area"]], "to_dict() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.to_dict"]], "validate_bricks() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.validate_bricks"]], "validate_land_use() (blocksnet.models.service_type.servicetype method)": [[19, "blocksnet.models.service_type.ServiceType.validate_land_use"]], "blocksnet.preprocessing": [[20, "module-blocksnet.preprocessing"]], "accessibilityprocessor (class in blocksnet.preprocessing.accessibility_processor)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor"]], "blocksschema (class in blocksnet.preprocessing.accessibility_processor)": [[21, "blocksnet.preprocessing.accessibility_processor.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.accessibility_processor)": [[21, "blocksnet.preprocessing.accessibility_processor.BlocksSchema.Config"]], "_fix_graph() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor class method)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor._fix_graph"]], "_get_broken_nodes() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor static method)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor._get_broken_nodes"]], "_get_island_nodes() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor static method)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor._get_island_nodes"]], "blocksnet.preprocessing.accessibility_processor": [[21, "module-blocksnet.preprocessing.accessibility_processor"]], "get_accessibility_matrix() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor method)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.get_accessibility_matrix"]], "get_intermodal_graph() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor method)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.get_intermodal_graph"]], "name (blocksnet.preprocessing.accessibility_processor.blocksschema.config attribute)": [[21, "blocksnet.preprocessing.accessibility_processor.BlocksSchema.Config.name"]], "plot() (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor static method)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.plot"]], "polygon (blocksnet.preprocessing.accessibility_processor.accessibilityprocessor property)": [[21, "blocksnet.preprocessing.accessibility_processor.AccessibilityProcessor.polygon"]], "blocksgenerator (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksGenerator"]], "blocksschema (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksSchema.Config"]], "boundariesschema (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.BoundariesSchema"]], "boundariesschema.config (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.BoundariesSchema.Config"]], "railwaysschema (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.RailwaysSchema"]], "railwaysschema.config (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.RailwaysSchema.Config"]], "roadsschema (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.RoadsSchema"]], "roadsschema.config (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.RoadsSchema.Config"]], "waterschema (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.WaterSchema"]], "waterschema.config (class in blocksnet.preprocessing.blocks_generator)": [[22, "blocksnet.preprocessing.blocks_generator.WaterSchema.Config"]], "_get_enclosures() (blocksnet.preprocessing.blocks_generator.blocksgenerator static method)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksGenerator._get_enclosures"]], "_reindex_blocks() (blocksnet.preprocessing.blocks_generator.blocksgenerator static method)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksGenerator._reindex_blocks"]], "blocksnet.preprocessing.blocks_generator": [[22, "module-blocksnet.preprocessing.blocks_generator"]], "local_crs (blocksnet.preprocessing.blocks_generator.blocksgenerator property)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksGenerator.local_crs"]], "name (blocksnet.preprocessing.blocks_generator.blocksschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.boundariesschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_generator.BoundariesSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.railwaysschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_generator.RailwaysSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.roadsschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_generator.RoadsSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_generator.waterschema.config attribute)": [[22, "blocksnet.preprocessing.blocks_generator.WaterSchema.Config.name"]], "run() (blocksnet.preprocessing.blocks_generator.blocksgenerator method)": [[22, "blocksnet.preprocessing.blocks_generator.BlocksGenerator.run"], [22, "id0"]], "blocksschema (class in blocksnet.preprocessing.blocks_splitter)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.blocks_splitter)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSchema.Config"]], "blockssplitter (class in blocksnet.preprocessing.blocks_splitter)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter"]], "buildingsschema (class in blocksnet.preprocessing.blocks_splitter)": [[23, "blocksnet.preprocessing.blocks_splitter.BuildingsSchema"]], "buildingsschema.config (class in blocksnet.preprocessing.blocks_splitter)": [[23, "blocksnet.preprocessing.blocks_splitter.BuildingsSchema.Config"]], "_drop_index_columns() (blocksnet.preprocessing.blocks_splitter.blockssplitter static method)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter._drop_index_columns"]], "_split_block() (blocksnet.preprocessing.blocks_splitter.blockssplitter static method)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter._split_block"]], "blocksnet.preprocessing.blocks_splitter": [[23, "module-blocksnet.preprocessing.blocks_splitter"]], "name (blocksnet.preprocessing.blocks_splitter.blocksschema.config attribute)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSchema.Config.name"]], "name (blocksnet.preprocessing.blocks_splitter.buildingsschema.config attribute)": [[23, "blocksnet.preprocessing.blocks_splitter.BuildingsSchema.Config.name"]], "run() (blocksnet.preprocessing.blocks_splitter.blockssplitter method)": [[23, "blocksnet.preprocessing.blocks_splitter.BlocksSplitter.run"], [23, "id0"]], "blocksschema (class in blocksnet.preprocessing.land_use_optimizer)": [[24, "blocksnet.preprocessing.land_use_optimizer.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.land_use_optimizer)": [[24, "blocksnet.preprocessing.land_use_optimizer.BlocksSchema.Config"]], "landuseoptimizer (class in blocksnet.preprocessing.land_use_optimizer)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer"]], "_check_adj_rules() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._check_adj_rules"]], "_check_area_ranges() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._check_area_ranges"]], "_check_ratio_ranges() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._check_ratio_ranges"]], "_generate_initial_x() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._generate_initial_X"]], "_get_adjacency_graph() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer class method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._get_adjacency_graph"]], "_is_block_large() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer static method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._is_block_large"]], "_objective() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._objective"]], "_perturb() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer static method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._perturb"]], "_split_large_blocks() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer class method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._split_large_blocks"]], "_split_polygon() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer static method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer._split_polygon"]], "blocksnet.preprocessing.land_use_optimizer": [[24, "module-blocksnet.preprocessing.land_use_optimizer"]], "name (blocksnet.preprocessing.land_use_optimizer.blocksschema.config attribute)": [[24, "blocksnet.preprocessing.land_use_optimizer.BlocksSchema.Config.name"]], "run() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer.run"]], "to_gdf() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer.to_gdf"]], "to_shares_dict() (blocksnet.preprocessing.land_use_optimizer.landuseoptimizer method)": [[24, "blocksnet.preprocessing.land_use_optimizer.LandUseOptimizer.to_shares_dict"]], "blocksschema (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.BlocksSchema"]], "blocksschema.config (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.BlocksSchema.Config"]], "landuseprocessor (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.LandUseProcessor"]], "processedblocksschema (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema"]], "processedblocksschema.config (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.Config"]], "zonesschema (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.ZonesSchema"]], "zonesschema.config (class in blocksnet.preprocessing.land_use_processor)": [[25, "blocksnet.preprocessing.land_use_processor.ZonesSchema.Config"]], "blocksnet.preprocessing.land_use_processor": [[25, "module-blocksnet.preprocessing.land_use_processor"]], "land_use (blocksnet.preprocessing.land_use_processor.processedblocksschema attribute)": [[25, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.land_use"]], "name (blocksnet.preprocessing.land_use_processor.blocksschema.config attribute)": [[25, "blocksnet.preprocessing.land_use_processor.BlocksSchema.Config.name"]], "name (blocksnet.preprocessing.land_use_processor.processedblocksschema.config attribute)": [[25, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.Config.name"]], "name (blocksnet.preprocessing.land_use_processor.zonesschema.config attribute)": [[25, "blocksnet.preprocessing.land_use_processor.ZonesSchema.Config.name"]], "run() (blocksnet.preprocessing.land_use_processor.landuseprocessor method)": [[25, "blocksnet.preprocessing.land_use_processor.LandUseProcessor.run"], [25, "id0"]], "zone (blocksnet.preprocessing.land_use_processor.processedblocksschema attribute)": [[25, "blocksnet.preprocessing.land_use_processor.ProcessedBlocksSchema.zone"]], "zone (blocksnet.preprocessing.land_use_processor.zonesschema attribute)": [[25, "blocksnet.preprocessing.land_use_processor.ZonesSchema.zone"]], "blocksnet.utils": [[26, "module-blocksnet.utils"]], "blocksnet.utils.helpers": [[27, "module-blocksnet.utils.helpers"]], "drop_contained_geometries() (in module blocksnet.utils.helpers)": [[27, "blocksnet.utils.helpers.drop_contained_geometries"]], "fill_holes() (in module blocksnet.utils.helpers)": [[27, "blocksnet.utils.helpers.fill_holes"]], "filter_bottlenecks() (in module blocksnet.utils.helpers)": [[27, "blocksnet.utils.helpers.filter_bottlenecks"]], "get_polygon_aspect_ratio() (in module blocksnet.utils.helpers)": [[27, "blocksnet.utils.helpers.get_polygon_aspect_ratio"]], "blocksnet.utils.service_types": [[28, "module-blocksnet.utils.service_types"]]}})